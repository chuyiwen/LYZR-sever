/** 		
*   Copyright 2013-2015 Sophia 		
*   		
*   Licensed under the Apache License, Version 2.0 (the "License"); 		
*   you may not use this file except in compliance with the License.		
*   You may obtain a copy of the License at 		
* 		
*       http://www.apache.org/licenses/LICENSE-2.0 		
* 		
*   Unless required by applicable law or agreed to in writing, software 		
*   distributed under the License is distributed on an "AS IS" BASIS, 		
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 		
*   See the License for the specific language governing permissions and 		
*   limitations under the License. 		
*/
/**
* 2014.7.8-11:38:7
*
* generated by editor
*/

package sophia.mmorpg.ref.editorgen;

import java.util.Collection;
import sophia.foundation.property.PropertyDictionary;

import sophia.foundation.property.ValueProperty;
public class MGPropertyAccesser {
	/**
	* GET生命
	*
	* @return 生命
	*/
	public static final int getHP(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.HP_Id);
	}

	/**
	* SET生命
	*
	* @param HP 生命
	*/
	public static final void setOrPutHP(PropertyDictionary pd, int HP) {
		pd.setOrPutValue(MGPropertySymbolDefines.HP_Id, HP);
	}

	/**
	* GET魔法
	*
	* @return 魔法
	*/
	public static final int getMP(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MP_Id);
	}

	/**
	* SET魔法
	*
	* @param MP 魔法
	*/
	public static final void setOrPutMP(PropertyDictionary pd, int MP) {
		pd.setOrPutValue(MGPropertySymbolDefines.MP_Id, MP);
	}

	/**
	* GET生命恢复
	*
	* @return 生命恢复
	*/
	public static final int getHealHP(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.HealHP_Id);
	}

	/**
	* SET生命恢复
	*
	* @param healHP 生命恢复
	*/
	public static final void setOrPutHealHP(PropertyDictionary pd, int healHP) {
		pd.setOrPutValue(MGPropertySymbolDefines.HealHP_Id, healHP);
	}

	/**
	* GET魔法恢复
	*
	* @return 魔法恢复
	*/
	public static final int getHealMP(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.HealMP_Id);
	}

	/**
	* SET魔法恢复
	*
	* @param healMP 魔法恢复
	*/
	public static final void setOrPutHealMP(PropertyDictionary pd, int healMP) {
		pd.setOrPutValue(MGPropertySymbolDefines.HealMP_Id, healMP);
	}

	/**
	* GET生命上限
	*
	* @return 生命上限
	*/
	public static final int getMaxHP(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxHP_Id);
	}

	/**
	* SET生命上限
	*
	* @param maxHP 生命上限
	*/
	public static final void setOrPutMaxHP(PropertyDictionary pd, int maxHP) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxHP_Id, maxHP);
	}

	/**
	* GET魔法上限
	*
	* @return 魔法上限
	*/
	public static final int getMaxMP(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxMP_Id);
	}

	/**
	* SET魔法上限
	*
	* @param maxMP 魔法上限
	*/
	public static final void setOrPutMaxMP(PropertyDictionary pd, int maxMP) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxMP_Id, maxMP);
	}

	/**
	* GET生命百分比
	*
	* @return 生命百分比
	*/
	public static final int getPerHP(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PerHP_Id);
	}

	/**
	* SET生命百分比
	*
	* @param perHP 生命百分比
	*/
	public static final void setOrPutPerHP(PropertyDictionary pd, int perHP) {
		pd.setOrPutValue(MGPropertySymbolDefines.PerHP_Id, perHP);
	}

	/**
	* GET魔法百分比
	*
	* @return 魔法百分比
	*/
	public static final int getPerMP(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PerMP_Id);
	}

	/**
	* SET魔法百分比
	*
	* @param perMP 魔法百分比
	*/
	public static final void setOrPutPerMP(PropertyDictionary pd, int perMP) {
		pd.setOrPutValue(MGPropertySymbolDefines.PerMP_Id, perMP);
	}

	/**
	* GET最小物攻
	*
	* @return 最小物攻
	*/
	public static final int getMinPAtk(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MinPAtk_Id);
	}

	/**
	* SET最小物攻
	*
	* @param minPAtk 最小物攻
	*/
	public static final void setOrPutMinPAtk(PropertyDictionary pd, int minPAtk) {
		pd.setOrPutValue(MGPropertySymbolDefines.MinPAtk_Id, minPAtk);
	}

	/**
	* GET最大物攻
	*
	* @return 最大物攻
	*/
	public static final int getMaxPAtk(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxPAtk_Id);
	}

	/**
	* SET最大物攻
	*
	* @param maxPAtk 最大物攻
	*/
	public static final void setOrPutMaxPAtk(PropertyDictionary pd, int maxPAtk) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxPAtk_Id, maxPAtk);
	}

	/**
	* GET最小魔攻
	*
	* @return 最小魔攻
	*/
	public static final int getMinMAtk(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MinMAtk_Id);
	}

	/**
	* SET最小魔攻
	*
	* @param minMAtk 最小魔攻
	*/
	public static final void setOrPutMinMAtk(PropertyDictionary pd, int minMAtk) {
		pd.setOrPutValue(MGPropertySymbolDefines.MinMAtk_Id, minMAtk);
	}

	/**
	* GET最大魔攻
	*
	* @return 最大魔攻
	*/
	public static final int getMaxMAtk(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxMAtk_Id);
	}

	/**
	* SET最大魔攻
	*
	* @param maxMAtk 最大魔攻
	*/
	public static final void setOrPutMaxMAtk(PropertyDictionary pd, int maxMAtk) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxMAtk_Id, maxMAtk);
	}

	/**
	* GET最小道功
	*
	* @return 最小道功
	*/
	public static final int getMinTao(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MinTao_Id);
	}

	/**
	* SET最小道功
	*
	* @param minTao 最小道功
	*/
	public static final void setOrPutMinTao(PropertyDictionary pd, int minTao) {
		pd.setOrPutValue(MGPropertySymbolDefines.MinTao_Id, minTao);
	}

	/**
	* GET最大道功
	*
	* @return 最大道功
	*/
	public static final int getMaxTao(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxTao_Id);
	}

	/**
	* SET最大道功
	*
	* @param maxTao 最大道功
	*/
	public static final void setOrPutMaxTao(PropertyDictionary pd, int maxTao) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxTao_Id, maxTao);
	}

	/**
	* GET最小物防
	*
	* @return 最小物防
	*/
	public static final int getMinPDef(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MinPDef_Id);
	}

	/**
	* SET最小物防
	*
	* @param minPDef 最小物防
	*/
	public static final void setOrPutMinPDef(PropertyDictionary pd, int minPDef) {
		pd.setOrPutValue(MGPropertySymbolDefines.MinPDef_Id, minPDef);
	}

	/**
	* GET最大物防
	*
	* @return 最大物防
	*/
	public static final int getMaxPDef(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxPDef_Id);
	}

	/**
	* SET最大物防
	*
	* @param maxPDef 最大物防
	*/
	public static final void setOrPutMaxPDef(PropertyDictionary pd, int maxPDef) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxPDef_Id, maxPDef);
	}

	/**
	* GET最小魔防
	*
	* @return 最小魔防
	*/
	public static final int getMinMDef(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MinMDef_Id);
	}

	/**
	* SET最小魔防
	*
	* @param minMDef 最小魔防
	*/
	public static final void setOrPutMinMDef(PropertyDictionary pd, int minMDef) {
		pd.setOrPutValue(MGPropertySymbolDefines.MinMDef_Id, minMDef);
	}

	/**
	* GET最大魔防
	*
	* @return 最大魔防
	*/
	public static final int getMaxMDef(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxMDef_Id);
	}

	/**
	* SET最大魔防
	*
	* @param maxMDef 最大魔防
	*/
	public static final void setOrPutMaxMDef(PropertyDictionary pd, int maxMDef) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxMDef_Id, maxMDef);
	}

	/**
	* GET物理闪避
	*
	* @return 物理闪避
	*/
	public static final int getPDodge(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PDodge_Id);
	}

	/**
	* SET物理闪避
	*
	* @param PDodge 物理闪避
	*/
	public static final void setOrPutPDodge(PropertyDictionary pd, int PDodge) {
		pd.setOrPutValue(MGPropertySymbolDefines.PDodge_Id, PDodge);
	}

	/**
	* GET魔法闪避
	*
	* @return 魔法闪避
	*/
	public static final int getMDodge(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MDodge_Id);
	}

	/**
	* SET魔法闪避
	*
	* @param MDodge 魔法闪避
	*/
	public static final void setOrPutMDodge(PropertyDictionary pd, int MDodge) {
		pd.setOrPutValue(MGPropertySymbolDefines.MDodge_Id, MDodge);
	}

	/**
	* GET物理减免
	*
	* @return 物理减免
	*/
	public static final int getPImmunityPer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PImmunityPer_Id);
	}

	/**
	* SET物理减免
	*
	* @param PImmunityPer 物理减免
	*/
	public static final void setOrPutPImmunityPer(PropertyDictionary pd, int PImmunityPer) {
		pd.setOrPutValue(MGPropertySymbolDefines.PImmunityPer_Id, PImmunityPer);
	}

	/**
	* GET魔法减免
	*
	* @return 魔法减免
	*/
	public static final int getMImmunityPer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MImmunityPer_Id);
	}

	/**
	* SET魔法减免
	*
	* @param MImmunityPer 魔法减免
	*/
	public static final void setOrPutMImmunityPer(PropertyDictionary pd, int MImmunityPer) {
		pd.setOrPutValue(MGPropertySymbolDefines.MImmunityPer_Id, MImmunityPer);
	}

	/**
	* GET移动速度
	*
	* @return 移动速度
	*/
	public static final int getMoveSpeed(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MoveSpeed_Id);
	}

	/**
	* SET移动速度
	*
	* @param moveSpeed 移动速度
	*/
	public static final void setOrPutMoveSpeed(PropertyDictionary pd, int moveSpeed) {
		pd.setOrPutValue(MGPropertySymbolDefines.MoveSpeed_Id, moveSpeed);
	}

	/**
	* GET攻击速度
	*
	* @return 攻击速度
	*/
	public static final int getAtkSpeed(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AtkSpeed_Id);
	}

	/**
	* SET攻击速度
	*
	* @param atkSpeed 攻击速度
	*/
	public static final void setOrPutAtkSpeed(PropertyDictionary pd, int atkSpeed) {
		pd.setOrPutValue(MGPropertySymbolDefines.AtkSpeed_Id, atkSpeed);
	}

	/**
	* GET施法速度
	*
	* @return 施法速度
	*/
	public static final int getMagicSpeed(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MagicSpeed_Id);
	}

	/**
	* SET施法速度
	*
	* @param magicSpeed 施法速度
	*/
	public static final void setOrPutMagicSpeed(PropertyDictionary pd, int magicSpeed) {
		pd.setOrPutValue(MGPropertySymbolDefines.MagicSpeed_Id, magicSpeed);
	}

	/**
	* GET命中
	*
	* @return 命中
	*/
	public static final int getHit(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Hit_Id);
	}

	/**
	* SET命中
	*
	* @param hit 命中
	*/
	public static final void setOrPutHit(PropertyDictionary pd, int hit) {
		pd.setOrPutValue(MGPropertySymbolDefines.Hit_Id, hit);
	}

	/**
	* GET暴击
	*
	* @return 暴击
	*/
	public static final int getCrit(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Crit_Id);
	}

	/**
	* SET暴击
	*
	* @param crit 暴击
	*/
	public static final void setOrPutCrit(PropertyDictionary pd, int crit) {
		pd.setOrPutValue(MGPropertySymbolDefines.Crit_Id, crit);
	}

	/**
	* GET暴击伤害
	*
	* @return 暴击伤害
	*/
	public static final int getCritInjure(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CritInjure_Id);
	}

	/**
	* SET暴击伤害
	*
	* @param critInjure 暴击伤害
	*/
	public static final void setOrPutCritInjure(PropertyDictionary pd, int critInjure) {
		pd.setOrPutValue(MGPropertySymbolDefines.CritInjure_Id, critInjure);
	}

	/**
	* GET幸运
	*
	* @return 幸运
	*/
	public static final int getFortune(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Fortune_Id);
	}

	/**
	* SET幸运
	*
	* @param fortune 幸运
	*/
	public static final void setOrPutFortune(PropertyDictionary pd, int fortune) {
		pd.setOrPutValue(MGPropertySymbolDefines.Fortune_Id, fortune);
	}

	/**
	* GET忽视对方物理防御
	*
	* @return 忽视对方物理防御
	*/
	public static final int getIgnorePDef(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IgnorePDef_Id);
	}

	/**
	* SET忽视对方物理防御
	*
	* @param ignorePDef 忽视对方物理防御
	*/
	public static final void setOrPutIgnorePDef(PropertyDictionary pd, int ignorePDef) {
		pd.setOrPutValue(MGPropertySymbolDefines.IgnorePDef_Id, ignorePDef);
	}

	/**
	* GET忽视对方魔法防御
	*
	* @return 忽视对方魔法防御
	*/
	public static final int getIgnoreMDef(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IgnoreMDef_Id);
	}

	/**
	* SET忽视对方魔法防御
	*
	* @param ignoreMDef 忽视对方魔法防御
	*/
	public static final void setOrPutIgnoreMDef(PropertyDictionary pd, int ignoreMDef) {
		pd.setOrPutValue(MGPropertySymbolDefines.IgnoreMDef_Id, ignoreMDef);
	}

	/**
	* GET命中百分比
	*
	* @return 命中百分比
	*/
	public static final int getHitPer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.HitPer_Id);
	}

	/**
	* SET命中百分比
	*
	* @param hitPer 命中百分比
	*/
	public static final void setOrPutHitPer(PropertyDictionary pd, int hitPer) {
		pd.setOrPutValue(MGPropertySymbolDefines.HitPer_Id, hitPer);
	}

	/**
	* GET暴击百分比
	*
	* @return 暴击百分比
	*/
	public static final int getCritPer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CritPer_Id);
	}

	/**
	* SET暴击百分比
	*
	* @param critPer 暴击百分比
	*/
	public static final void setOrPutCritPer(PropertyDictionary pd, int critPer) {
		pd.setOrPutValue(MGPropertySymbolDefines.CritPer_Id, critPer);
	}

	/**
	* GET物理闪避百分比
	*
	* @return 物理闪避百分比
	*/
	public static final int getPDodgePer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PDodgePer_Id);
	}

	/**
	* SET物理闪避百分比
	*
	* @param PDodgePer 物理闪避百分比
	*/
	public static final void setOrPutPDodgePer(PropertyDictionary pd, int PDodgePer) {
		pd.setOrPutValue(MGPropertySymbolDefines.PDodgePer_Id, PDodgePer);
	}

	/**
	* GET魔法闪避百分比
	*
	* @return 魔法闪避百分比
	*/
	public static final int getMDodgePer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MDodgePer_Id);
	}

	/**
	* SET魔法闪避百分比
	*
	* @param MDodgePer 魔法闪避百分比
	*/
	public static final void setOrPutMDodgePer(PropertyDictionary pd, int MDodgePer) {
		pd.setOrPutValue(MGPropertySymbolDefines.MDodgePer_Id, MDodgePer);
	}

	/**
	* GET伤害值
	*
	* @return 伤害值
	*/
	public static final int getInjure(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Injure_Id);
	}

	/**
	* SET伤害值
	*
	* @param injure 伤害值
	*/
	public static final void setOrPutInjure(PropertyDictionary pd, int injure) {
		pd.setOrPutValue(MGPropertySymbolDefines.Injure_Id, injure);
	}

	/**
	* GET伤害百分比
	*
	* @return 伤害百分比
	*/
	public static final int getInjurePer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.InjurePer_Id);
	}

	/**
	* SET伤害百分比
	*
	* @param injurePer 伤害百分比
	*/
	public static final void setOrPutInjurePer(PropertyDictionary pd, int injurePer) {
		pd.setOrPutValue(MGPropertySymbolDefines.InjurePer_Id, injurePer);
	}

	/**
	* GET闪避
	*
	* @return 闪避
	*/
	public static final int getDodge(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Dodge_Id);
	}

	/**
	* SET闪避
	*
	* @param dodge 闪避
	*/
	public static final void setOrPutDodge(PropertyDictionary pd, int dodge) {
		pd.setOrPutValue(MGPropertySymbolDefines.Dodge_Id, dodge);
	}

	/**
	* GETPK值
	*
	* @return PK值
	*/
	public static final int getPkValue(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PkValue_Id);
	}

	/**
	* SETPK值
	*
	* @param pkValue PK值
	*/
	public static final void setOrPutPkValue(PropertyDictionary pd, int pkValue) {
		pd.setOrPutValue(MGPropertySymbolDefines.PkValue_Id, pkValue);
	}

	/**
	* GET成就
	*
	* @return 成就
	*/
	public static final int getAchievement(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Achievement_Id);
	}

	/**
	* SET成就
	*
	* @param achievement 成就
	*/
	public static final void setOrPutAchievement(PropertyDictionary pd, int achievement) {
		pd.setOrPutValue(MGPropertySymbolDefines.Achievement_Id, achievement);
	}

	/**
	* GET功勋
	*
	* @return 功勋
	*/
	public static final int getMerit(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Merit_Id);
	}

	/**
	* SET功勋
	*
	* @param merit 功勋
	*/
	public static final void setOrPutMerit(PropertyDictionary pd, int merit) {
		pd.setOrPutValue(MGPropertySymbolDefines.Merit_Id, merit);
	}

	/**
	* GET战斗力
	*
	* @return 战斗力
	*/
	public static final int getFightValue(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.FightValue_Id);
	}

	/**
	* SET战斗力
	*
	* @param fightValue 战斗力
	*/
	public static final void setOrPutFightValue(PropertyDictionary pd, int fightValue) {
		pd.setOrPutValue(MGPropertySymbolDefines.FightValue_Id, fightValue);
	}

	/**
	* GET荣誉
	*
	* @return 荣誉
	*/
	public static final int getHonor(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Honor_Id);
	}

	/**
	* SET荣誉
	*
	* @param honor 荣誉
	*/
	public static final void setOrPutHonor(PropertyDictionary pd, int honor) {
		pd.setOrPutValue(MGPropertySymbolDefines.Honor_Id, honor);
	}

	/**
	* GET修为
	*
	* @return 修为
	*/
	public static final int getCultivation(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Cultivation_Id);
	}

	/**
	* SET修为
	*
	* @param cultivation 修为
	*/
	public static final void setOrPutCultivation(PropertyDictionary pd, int cultivation) {
		pd.setOrPutValue(MGPropertySymbolDefines.Cultivation_Id, cultivation);
	}

	/**
	* GET成就ID
	*
	* @return 成就ID
	*/
	public static final byte getAchieveId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AchieveId_Id);
	}

	/**
	* SET成就ID
	*
	* @param achieveId 成就ID
	*/
	public static final void setOrPutAchieveId(PropertyDictionary pd, byte achieveId) {
		pd.setOrPutValue(MGPropertySymbolDefines.AchieveId_Id, achieveId);
	}

	/**
	* GET后置成就
	*
	* @return 后置成就
	*/
	public static final String getNextAchieve(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.NextAchieve_Id);
	}

	/**
	* SET后置成就
	*
	* @param nextAchieve 后置成就
	*/
	public static final void setOrPutNextAchieve(PropertyDictionary pd, String nextAchieve) {
		pd.setOrPutValue(MGPropertySymbolDefines.NextAchieve_Id, nextAchieve);
	}

	/**
	* GET成就类型
	*
	* @return 成就类型
	*/
	public static final byte getAchieveType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AchieveType_Id);
	}

	/**
	* SET成就类型
	*
	* @param achieveType 成就类型
	*/
	public static final void setOrPutAchieveType(PropertyDictionary pd, byte achieveType) {
		pd.setOrPutValue(MGPropertySymbolDefines.AchieveType_Id, achieveType);
	}

	/**
	* GET分类名称
	*
	* @return 分类名称
	*/
	public static final String getTypeName(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TypeName_Id);
	}

	/**
	* SET分类名称
	*
	* @param typeName 分类名称
	*/
	public static final void setOrPutTypeName(PropertyDictionary pd, String typeName) {
		pd.setOrPutValue(MGPropertySymbolDefines.TypeName_Id, typeName);
	}

	/**
	* GET完成条件
	*
	* @return 完成条件
	*/
	public static final byte getCompleteCondition(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CompleteCondition_Id);
	}

	/**
	* SET完成条件
	*
	* @param completeCondition 完成条件
	*/
	public static final void setOrPutCompleteCondition(PropertyDictionary pd, byte completeCondition) {
		pd.setOrPutValue(MGPropertySymbolDefines.CompleteCondition_Id, completeCondition);
	}

	/**
	* GET目标ID
	*
	* @return 目标ID
	*/
	public static final String getTargetID(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TargetID_Id);
	}

	/**
	* SET目标ID
	*
	* @param targetID 目标ID
	*/
	public static final void setOrPutTargetID(PropertyDictionary pd, String targetID) {
		pd.setOrPutValue(MGPropertySymbolDefines.TargetID_Id, targetID);
	}

	/**
	* GET目标数量
	*
	* @return 目标数量
	*/
	public static final int getTargetNum(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TargetNum_Id);
	}

	/**
	* SET目标数量
	*
	* @param targetNum 目标数量
	*/
	public static final void setOrPutTargetNum(PropertyDictionary pd, int targetNum) {
		pd.setOrPutValue(MGPropertySymbolDefines.TargetNum_Id, targetNum);
	}

	/**
	* GET成就描述
	*
	* @return 成就描述
	*/
	public static final String getAchieveDescribe(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AchieveDescribe_Id);
	}

	/**
	* SET成就描述
	*
	* @param achieveDescribe 成就描述
	*/
	public static final void setOrPutAchieveDescribe(PropertyDictionary pd, String achieveDescribe) {
		pd.setOrPutValue(MGPropertySymbolDefines.AchieveDescribe_Id, achieveDescribe);
	}

	/**
	* GET成就奖励
	*
	* @return 成就奖励
	*/
	public static final String getAchieveReward(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AchieveReward_Id);
	}

	/**
	* SET成就奖励
	*
	* @param achieveReward 成就奖励
	*/
	public static final void setOrPutAchieveReward(PropertyDictionary pd, String achieveReward) {
		pd.setOrPutValue(MGPropertySymbolDefines.AchieveReward_Id, achieveReward);
	}

	/**
	* GET攻速百分比
	*
	* @return 攻速百分比
	*/
	public static final int getAtkSpeedPer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AtkSpeedPer_Id);
	}

	/**
	* SET攻速百分比
	*
	* @param atkSpeedPer 攻速百分比
	*/
	public static final void setOrPutAtkSpeedPer(PropertyDictionary pd, int atkSpeedPer) {
		pd.setOrPutValue(MGPropertySymbolDefines.AtkSpeedPer_Id, atkSpeedPer);
	}

	/**
	* GET攻击类型
	*
	* @return 攻击类型
	*/
	public static final byte getAttackType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AttackType_Id);
	}

	/**
	* SET攻击类型
	*
	* @param attackType 攻击类型
	*/
	public static final void setOrPutAttackType(PropertyDictionary pd, byte attackType) {
		pd.setOrPutValue(MGPropertySymbolDefines.AttackType_Id, attackType);
	}

	/**
	* GET攻击距离
	*
	* @return 攻击距离
	*/
	public static final byte getAttackDistance(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AttackDistance_Id);
	}

	/**
	* SET攻击距离
	*
	* @param attackDistance 攻击距离
	*/
	public static final void setOrPutAttackDistance(PropertyDictionary pd, byte attackDistance) {
		pd.setOrPutValue(MGPropertySymbolDefines.AttackDistance_Id, attackDistance);
	}

	/**
	* GET复活场景Id
	*
	* @return 复活场景Id
	*/
	public static final String getReviveSceneRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ReviveSceneRefId_Id);
	}

	/**
	* SET复活场景Id
	*
	* @param reviveSceneRefId 复活场景Id
	*/
	public static final void setOrPutReviveSceneRefId(PropertyDictionary pd, String reviveSceneRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.ReviveSceneRefId_Id, reviveSceneRefId);
	}

	/**
	* GET玩家状态
	*
	* @return 玩家状态
	*/
	public static final byte getStates(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.States_Id);
	}

	/**
	* SET玩家状态
	*
	* @param states 玩家状态
	*/
	public static final void setOrPutStates(PropertyDictionary pd, byte states) {
		pd.setOrPutValue(MGPropertySymbolDefines.States_Id, states);
	}

	/**
	* GET名称颜色
	*
	* @return 名称颜色
	*/
	public static final short getNameColor(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.NameColor_Id);
	}

	/**
	* SET名称颜色
	*
	* @param nameColor 名称颜色
	*/
	public static final void setOrPutNameColor(PropertyDictionary pd, short nameColor) {
		pd.setOrPutValue(MGPropertySymbolDefines.NameColor_Id, nameColor);
	}

	/**
	* GET出生时间
	*
	* @return 出生时间
	*/
	public static final long getBirthday(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Birthday_Id);
	}

	/**
	* SET出生时间
	*
	* @param birthday 出生时间
	*/
	public static final void setOrPutBirthday(PropertyDictionary pd, long birthday) {
		pd.setOrPutValue(MGPropertySymbolDefines.Birthday_Id, birthday);
	}

	/**
	* GET击杀者名称
	*
	* @return 击杀者名称
	*/
	public static final String getKillerName(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KillerName_Id);
	}

	/**
	* SET击杀者名称
	*
	* @param killerName 击杀者名称
	*/
	public static final void setOrPutKillerName(PropertyDictionary pd, String killerName) {
		pd.setOrPutValue(MGPropertySymbolDefines.KillerName_Id, killerName);
	}

	/**
	* GET击杀者类型
	*
	* @return 击杀者类型
	*/
	public static final byte getKillerType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KillerType_Id);
	}

	/**
	* SET击杀者类型
	*
	* @param killerType 击杀者类型
	*/
	public static final void setOrPutKillerType(PropertyDictionary pd, byte killerType) {
		pd.setOrPutValue(MGPropertySymbolDefines.KillerType_Id, killerType);
	}

	/**
	* GET被击杀时间
	*
	* @return 被击杀时间
	*/
	public static final long getDeadTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.DeadTime_Id);
	}

	/**
	* SET被击杀时间
	*
	* @param deadTime 被击杀时间
	*/
	public static final void setOrPutDeadTime(PropertyDictionary pd, long deadTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.DeadTime_Id, deadTime);
	}

	/**
	* GET击杀者uuid
	*
	* @return 击杀者uuid
	*/
	public static final String getKillerCharId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KillerCharId_Id);
	}

	/**
	* SET击杀者uuid
	*
	* @param killerCharId 击杀者uuid
	*/
	public static final void setOrPutKillerCharId(PropertyDictionary pd, String killerCharId) {
		pd.setOrPutValue(MGPropertySymbolDefines.KillerCharId_Id, killerCharId);
	}

	/**
	* GET击杀者等级
	*
	* @return 击杀者等级
	*/
	public static final int getKillerLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KillerLevel_Id);
	}

	/**
	* SET击杀者等级
	*
	* @param killerLevel 击杀者等级
	*/
	public static final void setOrPutKillerLevel(PropertyDictionary pd, int killerLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.KillerLevel_Id, killerLevel);
	}

	/**
	* GET击杀者职业
	*
	* @return 击杀者职业
	*/
	public static final byte getKillerOccupa(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KillerOccupa_Id);
	}

	/**
	* SET击杀者职业
	*
	* @param killerOccupa 击杀者职业
	*/
	public static final void setOrPutKillerOccupa(PropertyDictionary pd, byte killerOccupa) {
		pd.setOrPutValue(MGPropertySymbolDefines.KillerOccupa_Id, killerOccupa);
	}

	/**
	* GET击杀者战力
	*
	* @return 击杀者战力
	*/
	public static final int getKillerFightPower(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KillerFightPower_Id);
	}

	/**
	* SET击杀者战力
	*
	* @param killerFightPower 击杀者战力
	*/
	public static final void setOrPutKillerFightPower(PropertyDictionary pd, int killerFightPower) {
		pd.setOrPutValue(MGPropertySymbolDefines.KillerFightPower_Id, killerFightPower);
	}

	/**
	* GET能否使用
	*
	* @return 能否使用
	*/
	public static final byte getCanUse(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CanUse_Id);
	}

	/**
	* SET能否使用
	*
	* @param canUse 能否使用
	*/
	public static final void setOrPutCanUse(PropertyDictionary pd, byte canUse) {
		pd.setOrPutValue(MGPropertySymbolDefines.CanUse_Id, canUse);
	}

	/**
	* GET叠加上限
	*
	* @return 叠加上限
	*/
	public static final int getMaxStackNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxStackNumber_Id);
	}

	/**
	* SET叠加上限
	*
	* @param maxStackNumber 叠加上限
	*/
	public static final void setOrPutMaxStackNumber(PropertyDictionary pd, int maxStackNumber) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxStackNumber_Id, maxStackNumber);
	}

	/**
	* GET绑定类型
	*
	* @return 绑定类型
	*/
	public static final byte getBindType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BindType_Id);
	}

	/**
	* SET绑定类型
	*
	* @param bindType 绑定类型
	*/
	public static final void setOrPutBindType(PropertyDictionary pd, byte bindType) {
		pd.setOrPutValue(MGPropertySymbolDefines.BindType_Id, bindType);
	}

	/**
	* GET使用等级
	*
	* @return 使用等级
	*/
	public static final int getUseLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UseLevel_Id);
	}

	/**
	* SET使用等级
	*
	* @param useLevel 使用等级
	*/
	public static final void setOrPutUseLevel(PropertyDictionary pd, int useLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.UseLevel_Id, useLevel);
	}

	/**
	* GET使用爵位
	*
	* @return 使用爵位
	*/
	public static final byte getUseKnight(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UseKnight_Id);
	}

	/**
	* SET使用爵位
	*
	* @param useKnight 使用爵位
	*/
	public static final void setOrPutUseKnight(PropertyDictionary pd, byte useKnight) {
		pd.setOrPutValue(MGPropertySymbolDefines.UseKnight_Id, useKnight);
	}

	/**
	* GET每天可使用次数
	*
	* @return 每天可使用次数
	*/
	public static final int getUseCountEveryday(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UseCountEveryday_Id);
	}

	/**
	* SET每天可使用次数
	*
	* @param useCountEveryday 每天可使用次数
	*/
	public static final void setOrPutUseCountEveryday(PropertyDictionary pd, int useCountEveryday) {
		pd.setOrPutValue(MGPropertySymbolDefines.UseCountEveryday_Id, useCountEveryday);
	}

	/**
	* GET允许使用时间
	*
	* @return 允许使用时间
	*/
	public static final String getCanUseIfDate(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CanUseIfDate_Id);
	}

	/**
	* SET允许使用时间
	*
	* @param canUseIfDate 允许使用时间
	*/
	public static final void setOrPutCanUseIfDate(PropertyDictionary pd, String canUseIfDate) {
		pd.setOrPutValue(MGPropertySymbolDefines.CanUseIfDate_Id, canUseIfDate);
	}

	/**
	* GET过期时间
	*
	* @return 过期时间
	*/
	public static final String getExpiredTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ExpiredTime_Id);
	}

	/**
	* SET过期时间
	*
	* @param expiredTime 过期时间
	*/
	public static final void setOrPutExpiredTime(PropertyDictionary pd, String expiredTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.ExpiredTime_Id, expiredTime);
	}

	/**
	* GET物品效果
	*
	* @return 物品效果
	*/
	public static final short getItemEffect(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemEffect_Id);
	}

	/**
	* SET物品效果
	*
	* @param itemEffect 物品效果
	*/
	public static final void setOrPutItemEffect(PropertyDictionary pd, short itemEffect) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemEffect_Id, itemEffect);
	}

	/**
	* GET穿戴部位
	*
	* @return 穿戴部位
	*/
	public static final byte getAreaOfBody(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AreaOfBody_Id);
	}

	/**
	* SET穿戴部位
	*
	* @param areaOfBody 穿戴部位
	*/
	public static final void setOrPutAreaOfBody(PropertyDictionary pd, byte areaOfBody) {
		pd.setOrPutValue(MGPropertySymbolDefines.AreaOfBody_Id, areaOfBody);
	}

	/**
	* GET穿戴等级
	*
	* @return 穿戴等级
	*/
	public static final int getEquipLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.EquipLevel_Id);
	}

	/**
	* SET穿戴等级
	*
	* @param equipLevel 穿戴等级
	*/
	public static final void setOrPutEquipLevel(PropertyDictionary pd, int equipLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.EquipLevel_Id, equipLevel);
	}

	/**
	* GET物品种类
	*
	* @return 物品种类
	*/
	public static final byte getItemType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemType_Id);
	}

	/**
	* SET物品种类
	*
	* @param itemType 物品种类
	*/
	public static final void setOrPutItemType(PropertyDictionary pd, byte itemType) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemType_Id, itemType);
	}

	/**
	* GET物品属性是否可变
	*
	* @return 物品属性是否可变
	*/
	public static final byte getIsNonPropertyItem(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsNonPropertyItem_Id);
	}

	/**
	* SET物品属性是否可变
	*
	* @param isNonPropertyItem 物品属性是否可变
	*/
	public static final void setOrPutIsNonPropertyItem(PropertyDictionary pd, byte isNonPropertyItem) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsNonPropertyItem_Id, isNonPropertyItem);
	}

	/**
	* GET是否可卖
	*
	* @return 是否可卖
	*/
	public static final byte getIsCanSale(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsCanSale_Id);
	}

	/**
	* SET是否可卖
	*
	* @param isCanSale 是否可卖
	*/
	public static final void setOrPutIsCanSale(PropertyDictionary pd, byte isCanSale) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsCanSale_Id, isCanSale);
	}

	/**
	* GET出售价格
	*
	* @return 出售价格
	*/
	public static final int getSalePrice(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SalePrice_Id);
	}

	/**
	* SET出售价格
	*
	* @param salePrice 出售价格
	*/
	public static final void setOrPutSalePrice(PropertyDictionary pd, int salePrice) {
		pd.setOrPutValue(MGPropertySymbolDefines.SalePrice_Id, salePrice);
	}

	/**
	* GET卖价单位
	*
	* @return 卖价单位
	*/
	public static final byte getSaleCurrency(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SaleCurrency_Id);
	}

	/**
	* SET卖价单位
	*
	* @param saleCurrency 卖价单位
	*/
	public static final void setOrPutSaleCurrency(PropertyDictionary pd, byte saleCurrency) {
		pd.setOrPutValue(MGPropertySymbolDefines.SaleCurrency_Id, saleCurrency);
	}

	/**
	* GET可否丢弃
	*
	* @return 可否丢弃
	*/
	public static final byte getIsNonThrow(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsNonThrow_Id);
	}

	/**
	* SET可否丢弃
	*
	* @param isNonThrow 可否丢弃
	*/
	public static final void setOrPutIsNonThrow(PropertyDictionary pd, byte isNonThrow) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsNonThrow_Id, isNonThrow);
	}

	/**
	* GET自动使用优先级
	*
	* @return 自动使用优先级
	*/
	public static final byte getAutoUsePriority(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AutoUsePriority_Id);
	}

	/**
	* SET自动使用优先级
	*
	* @param autoUsePriority 自动使用优先级
	*/
	public static final void setOrPutAutoUsePriority(PropertyDictionary pd, byte autoUsePriority) {
		pd.setOrPutValue(MGPropertySymbolDefines.AutoUsePriority_Id, autoUsePriority);
	}

	/**
	* GETCD组id
	*
	* @return CD组id
	*/
	public static final byte getItemCDGroup(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemCDGroup_Id);
	}

	/**
	* SETCD组id
	*
	* @param itemCDGroup CD组id
	*/
	public static final void setOrPutItemCDGroup(PropertyDictionary pd, byte itemCDGroup) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemCDGroup_Id, itemCDGroup);
	}

	/**
	* GET物品排序Id
	*
	* @return 物品排序Id
	*/
	public static final int getItemSortId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemSortId_Id);
	}

	/**
	* SET物品排序Id
	*
	* @param itemSortId 物品排序Id
	*/
	public static final void setOrPutItemSortId(PropertyDictionary pd, int itemSortId) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemSortId_Id, itemSortId);
	}

	/**
	* GET背包格索引
	*
	* @return 背包格索引
	*/
	public static final int getSlotIndex(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SlotIndex_Id);
	}

	/**
	* SET背包格索引
	*
	* @param slotIndex 背包格索引
	*/
	public static final void setOrPutSlotIndex(PropertyDictionary pd, int slotIndex) {
		pd.setOrPutValue(MGPropertySymbolDefines.SlotIndex_Id, slotIndex);
	}

	/**
	* GET物品引用Id
	*
	* @return 物品引用Id
	*/
	public static final String getItemRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemRefId_Id);
	}

	/**
	* SET物品引用Id
	*
	* @param itemRefId 物品引用Id
	*/
	public static final void setOrPutItemRefId(PropertyDictionary pd, String itemRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemRefId_Id, itemRefId);
	}

	/**
	* GET绑定状态
	*
	* @return 绑定状态
	*/
	public static final byte getBindStatus(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BindStatus_Id);
	}

	/**
	* SET绑定状态
	*
	* @param bindStatus 绑定状态
	*/
	public static final void setOrPutBindStatus(PropertyDictionary pd, byte bindStatus) {
		pd.setOrPutValue(MGPropertySymbolDefines.BindStatus_Id, bindStatus);
	}

	/**
	* GET已开启的格子数
	*
	* @return 已开启的格子数
	*/
	public static final int getItemSlotOpened(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemSlotOpened_Id);
	}

	/**
	* SET已开启的格子数
	*
	* @param itemSlotOpened 已开启的格子数
	*/
	public static final void setOrPutItemSlotOpened(PropertyDictionary pd, int itemSlotOpened) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemSlotOpened_Id, itemSlotOpened);
	}

	/**
	* GET已经使用的格子数
	*
	* @return 已经使用的格子数
	*/
	public static final int getUsedSlotNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UsedSlotNumber_Id);
	}

	/**
	* SET已经使用的格子数
	*
	* @param usedSlotNumber 已经使用的格子数
	*/
	public static final void setOrPutUsedSlotNumber(PropertyDictionary pd, int usedSlotNumber) {
		pd.setOrPutValue(MGPropertySymbolDefines.UsedSlotNumber_Id, usedSlotNumber);
	}

	/**
	* GET背包的容量
	*
	* @return 背包的容量
	*/
	public static final int getItemBagCapacity(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemBagCapacity_Id);
	}

	/**
	* SET背包的容量
	*
	* @param itemBagCapacity 背包的容量
	*/
	public static final void setOrPutItemBagCapacity(PropertyDictionary pd, int itemBagCapacity) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemBagCapacity_Id, itemBagCapacity);
	}

	/**
	* GET评价等级
	*
	* @return 评价等级
	*/
	public static final int getEvaluateLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.EvaluateLevel_Id);
	}

	/**
	* SET评价等级
	*
	* @param evaluateLevel 评价等级
	*/
	public static final void setOrPutEvaluateLevel(PropertyDictionary pd, int evaluateLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.EvaluateLevel_Id, evaluateLevel);
	}

	/**
	* GET使用材料数量
	*
	* @return 使用材料数量
	*/
	public static final int getUseMaterialCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UseMaterialCount_Id);
	}

	/**
	* SET使用材料数量
	*
	* @param useMaterialCount 使用材料数量
	*/
	public static final void setOrPutUseMaterialCount(PropertyDictionary pd, int useMaterialCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.UseMaterialCount_Id, useMaterialCount);
	}

	/**
	* GET成功率提升消耗
	*
	* @return 成功率提升消耗
	*/
	public static final int getSucceedUpConsume(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SucceedUpConsume_Id);
	}

	/**
	* SET成功率提升消耗
	*
	* @param succeedUpConsume 成功率提升消耗
	*/
	public static final void setOrPutSucceedUpConsume(PropertyDictionary pd, int succeedUpConsume) {
		pd.setOrPutValue(MGPropertySymbolDefines.SucceedUpConsume_Id, succeedUpConsume);
	}

	/**
	* GET失败级别
	*
	* @return 失败级别
	*/
	public static final byte getFailedDownToLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.FailedDownToLevel_Id);
	}

	/**
	* SET失败级别
	*
	* @param failedDownToLevel 失败级别
	*/
	public static final void setOrPutFailedDownToLevel(PropertyDictionary pd, byte failedDownToLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.FailedDownToLevel_Id, failedDownToLevel);
	}

	/**
	* GET强化等级
	*
	* @return 强化等级
	*/
	public static final byte getStrengtheningLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StrengtheningLevel_Id);
	}

	/**
	* SET强化等级
	*
	* @param strengtheningLevel 强化等级
	*/
	public static final void setOrPutStrengtheningLevel(PropertyDictionary pd, byte strengtheningLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.StrengtheningLevel_Id, strengtheningLevel);
	}

	/**
	* GET是否可分解
	*
	* @return 是否可分解
	*/
	public static final byte getIsResolve(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsResolve_Id);
	}

	/**
	* SET是否可分解
	*
	* @param isResolve 是否可分解
	*/
	public static final void setOrPutIsResolve(PropertyDictionary pd, byte isResolve) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsResolve_Id, isResolve);
	}

	/**
	* GET弹出界面id
	*
	* @return 弹出界面id
	*/
	public static final byte getDialogId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.DialogId_Id);
	}

	/**
	* SET弹出界面id
	*
	* @param dialogId 弹出界面id
	*/
	public static final void setOrPutDialogId(PropertyDictionary pd, byte dialogId) {
		pd.setOrPutValue(MGPropertySymbolDefines.DialogId_Id, dialogId);
	}

	/**
	* GET勋章
	*
	* @return 勋章
	*/
	public static final String getExMedal(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ExMedal_Id);
	}

	/**
	* SET勋章
	*
	* @param exMedal 勋章
	*/
	public static final void setOrPutExMedal(PropertyDictionary pd, String exMedal) {
		pd.setOrPutValue(MGPropertySymbolDefines.ExMedal_Id, exMedal);
	}

	/**
	* GET需求成就点
	*
	* @return 需求成就点
	*/
	public static final int getNeedAchieve(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.NeedAchieve_Id);
	}

	/**
	* SET需求成就点
	*
	* @param needAchieve 需求成就点
	*/
	public static final void setOrPutNeedAchieve(PropertyDictionary pd, int needAchieve) {
		pd.setOrPutValue(MGPropertySymbolDefines.NeedAchieve_Id, needAchieve);
	}

	/**
	* GET洗练次数
	*
	* @return 洗练次数
	*/
	public static final int getWashCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WashCount_Id);
	}

	/**
	* SET洗练次数
	*
	* @param washCount 洗练次数
	*/
	public static final void setOrPutWashCount(PropertyDictionary pd, int washCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.WashCount_Id, washCount);
	}

	/**
	* GET强化次数
	*
	* @return 强化次数
	*/
	public static final int getStrengTheningCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StrengTheningCount_Id);
	}

	/**
	* SET强化次数
	*
	* @param strengTheningCount 强化次数
	*/
	public static final void setOrPutStrengTheningCount(PropertyDictionary pd, int strengTheningCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.StrengTheningCount_Id, strengTheningCount);
	}

	/**
	* GET掉落图标Id
	*
	* @return 掉落图标Id
	*/
	public static final String getSmallIconId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SmallIconId_Id);
	}

	/**
	* SET掉落图标Id
	*
	* @param smallIconId 掉落图标Id
	*/
	public static final void setOrPutSmallIconId(PropertyDictionary pd, String smallIconId) {
		pd.setOrPutValue(MGPropertySymbolDefines.SmallIconId_Id, smallIconId);
	}

	/**
	* GET勋章下一级别refId
	*
	* @return 勋章下一级别refId
	*/
	public static final String getNextMedal(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.NextMedal_Id);
	}

	/**
	* SET勋章下一级别refId
	*
	* @param nextMedal 勋章下一级别refId
	*/
	public static final void setOrPutNextMedal(PropertyDictionary pd, String nextMedal) {
		pd.setOrPutValue(MGPropertySymbolDefines.NextMedal_Id, nextMedal);
	}

	/**
	* GET爵位名称
	*
	* @return 爵位名称
	*/
	public static final String getKnightName(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KnightName_Id);
	}

	/**
	* SET爵位名称
	*
	* @param knightName 爵位名称
	*/
	public static final void setOrPutKnightName(PropertyDictionary pd, String knightName) {
		pd.setOrPutValue(MGPropertySymbolDefines.KnightName_Id, knightName);
	}

	/**
	* GET批量使用
	*
	* @return 批量使用
	*/
	public static final byte getCanBatchUse(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CanBatchUse_Id);
	}

	/**
	* SET批量使用
	*
	* @param canBatchUse 批量使用
	*/
	public static final void setOrPutCanBatchUse(PropertyDictionary pd, byte canBatchUse) {
		pd.setOrPutValue(MGPropertySymbolDefines.CanBatchUse_Id, canBatchUse);
	}

	/**
	* GET道具组
	*
	* @return 道具组
	*/
	public static final byte getItemGroup(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemGroup_Id);
	}

	/**
	* SET道具组
	*
	* @param itemGroup 道具组
	*/
	public static final void setOrPutItemGroup(PropertyDictionary pd, byte itemGroup) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemGroup_Id, itemGroup);
	}

	/**
	* GET角色面板的模型id
	*
	* @return 角色面板的模型id
	*/
	public static final String getRoleModelId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RoleModelId_Id);
	}

	/**
	* SET角色面板的模型id
	*
	* @param roleModelId 角色面板的模型id
	*/
	public static final void setOrPutRoleModelId(PropertyDictionary pd, String roleModelId) {
		pd.setOrPutValue(MGPropertySymbolDefines.RoleModelId_Id, roleModelId);
	}

	/**
	* GET穿戴爵位
	*
	* @return 穿戴爵位
	*/
	public static final int getEquipKnight(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.EquipKnight_Id);
	}

	/**
	* SET穿戴爵位
	*
	* @param equipKnight 穿戴爵位
	*/
	public static final void setOrPutEquipKnight(PropertyDictionary pd, int equipKnight) {
		pd.setOrPutValue(MGPropertySymbolDefines.EquipKnight_Id, equipKnight);
	}

	/**
	* GET技能组Id
	*
	* @return 技能组Id
	*/
	public static final int getSkillGroupId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillGroupId_Id);
	}

	/**
	* SET技能组Id
	*
	* @param skillGroupId 技能组Id
	*/
	public static final void setOrPutSkillGroupId(PropertyDictionary pd, int skillGroupId) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillGroupId_Id, skillGroupId);
	}

	/**
	* GET技能攻击类型
	*
	* @return 技能攻击类型
	*/
	public static final byte getSkillAtkType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillAtkType_Id);
	}

	/**
	* SET技能攻击类型
	*
	* @param skillAtkType 技能攻击类型
	*/
	public static final void setOrPutSkillAtkType(PropertyDictionary pd, byte skillAtkType) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillAtkType_Id, skillAtkType);
	}

	/**
	* GET技能类型
	*
	* @return 技能类型
	*/
	public static final byte getSkillType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillType_Id);
	}

	/**
	* SET技能类型
	*
	* @param skillType 技能类型
	*/
	public static final void setOrPutSkillType(PropertyDictionary pd, byte skillType) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillType_Id, skillType);
	}

	/**
	* GET技能瞄准类型
	*
	* @return 技能瞄准类型
	*/
	public static final byte getSkillAimType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillAimType_Id);
	}

	/**
	* SET技能瞄准类型
	*
	* @param skillAimType 技能瞄准类型
	*/
	public static final void setOrPutSkillAimType(PropertyDictionary pd, byte skillAimType) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillAimType_Id, skillAimType);
	}

	/**
	* GET技能使用目标
	*
	* @return 技能使用目标
	*/
	public static final byte getSkillTargetType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillTargetType_Id);
	}

	/**
	* SET技能使用目标
	*
	* @param skillTargetType 技能使用目标
	*/
	public static final void setOrPutSkillTargetType(PropertyDictionary pd, byte skillTargetType) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillTargetType_Id, skillTargetType);
	}

	/**
	* GET技能学习等级
	*
	* @return 技能学习等级
	*/
	public static final int getSkillLearnLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillLearnLevel_Id);
	}

	/**
	* SET技能学习等级
	*
	* @param skillLearnLevel 技能学习等级
	*/
	public static final void setOrPutSkillLearnLevel(PropertyDictionary pd, int skillLearnLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillLearnLevel_Id, skillLearnLevel);
	}

	/**
	* GET技能学习类型
	*
	* @return 技能学习类型
	*/
	public static final int getSkillLearnType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillLearnType_Id);
	}

	/**
	* SET技能学习类型
	*
	* @param skillLearnType 技能学习类型
	*/
	public static final void setOrPutSkillLearnType(PropertyDictionary pd, int skillLearnType) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillLearnType_Id, skillLearnType);
	}

	/**
	* GET技能熟练度
	*
	* @return 技能熟练度
	*/
	public static final int getSkillExp(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillExp_Id);
	}

	/**
	* SET技能熟练度
	*
	* @param skillExp 技能熟练度
	*/
	public static final void setOrPutSkillExp(PropertyDictionary pd, int skillExp) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillExp_Id, skillExp);
	}

	/**
	* GET技能最大熟练度
	*
	* @return 技能最大熟练度
	*/
	public static final int getSkillMaxExp(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillMaxExp_Id);
	}

	/**
	* SET技能最大熟练度
	*
	* @param skillMaxExp 技能最大熟练度
	*/
	public static final void setOrPutSkillMaxExp(PropertyDictionary pd, int skillMaxExp) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillMaxExp_Id, skillMaxExp);
	}

	/**
	* GET技能击中动画
	*
	* @return 技能击中动画
	*/
	public static final int getSkillHitAni(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillHitAni_Id);
	}

	/**
	* SET技能击中动画
	*
	* @param skillHitAni 技能击中动画
	*/
	public static final void setOrPutSkillHitAni(PropertyDictionary pd, int skillHitAni) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillHitAni_Id, skillHitAni);
	}

	/**
	* GET技能暴击动画
	*
	* @return 技能暴击动画
	*/
	public static final int getSkillCritAni(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillCritAni_Id);
	}

	/**
	* SET技能暴击动画
	*
	* @param skillCritAni 技能暴击动画
	*/
	public static final void setOrPutSkillCritAni(PropertyDictionary pd, int skillCritAni) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillCritAni_Id, skillCritAni);
	}

	/**
	* GET技能动作动画
	*
	* @return 技能动作动画
	*/
	public static final int getSkillActionAni(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillActionAni_Id);
	}

	/**
	* SET技能动作动画
	*
	* @param skillActionAni 技能动作动画
	*/
	public static final void setOrPutSkillActionAni(PropertyDictionary pd, int skillActionAni) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillActionAni_Id, skillActionAni);
	}

	/**
	* GET技能等级
	*
	* @return 技能等级
	*/
	public static final int getSkillLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillLevel_Id);
	}

	/**
	* SET技能等级
	*
	* @param skillLevel 技能等级
	*/
	public static final void setOrPutSkillLevel(PropertyDictionary pd, int skillLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillLevel_Id, skillLevel);
	}

	/**
	* GET技能升级熟练度
	*
	* @return 技能升级熟练度
	*/
	public static final int getSkillUpperExp(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillUpperExp_Id);
	}

	/**
	* SET技能升级熟练度
	*
	* @param skillUpperExp 技能升级熟练度
	*/
	public static final void setOrPutSkillUpperExp(PropertyDictionary pd, int skillUpperExp) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillUpperExp_Id, skillUpperExp);
	}

	/**
	* GET技能动画
	*
	* @return 技能动画
	*/
	public static final int getSkillAni(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillAni_Id);
	}

	/**
	* SET技能动画
	*
	* @param skillAni 技能动画
	*/
	public static final void setOrPutSkillAni(PropertyDictionary pd, int skillAni) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillAni_Id, skillAni);
	}

	/**
	* GET技能函数
	*
	* @return 技能函数
	*/
	public static final String getSkillFunction(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillFunction_Id);
	}

	/**
	* SET技能函数
	*
	* @param skillFunction 技能函数
	*/
	public static final void setOrPutSkillFunction(PropertyDictionary pd, String skillFunction) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillFunction_Id, skillFunction);
	}

	/**
	* GET技能参数
	*
	* @return 技能参数
	*/
	public static final String getSkillParameters(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillParameters_Id);
	}

	/**
	* SET技能参数
	*
	* @param skillParameters 技能参数
	*/
	public static final void setOrPutSkillParameters(PropertyDictionary pd, String skillParameters) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillParameters_Id, skillParameters);
	}

	/**
	* GET技能的引用编号
	*
	* @return 技能的引用编号
	*/
	public static final String getSkillRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillRefId_Id);
	}

	/**
	* SET技能的引用编号
	*
	* @param skillRefId 技能的引用编号
	*/
	public static final void setOrPutSkillRefId(PropertyDictionary pd, String skillRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillRefId_Id, skillRefId);
	}

	/**
	* GET技能释放范围
	*
	* @return 技能释放范围
	*/
	public static final byte getSkillRange(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillRange_Id);
	}

	/**
	* SET技能释放范围
	*
	* @param skillRange 技能释放范围
	*/
	public static final void setOrPutSkillRange(PropertyDictionary pd, byte skillRange) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillRange_Id, skillRange);
	}

	/**
	* GET技能施法者动作
	*
	* @return 技能施法者动作
	*/
	public static final byte getSkillCasterAni(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillCasterAni_Id);
	}

	/**
	* SET技能施法者动作
	*
	* @param skillCasterAni 技能施法者动作
	*/
	public static final void setOrPutSkillCasterAni(PropertyDictionary pd, byte skillCasterAni) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillCasterAni_Id, skillCasterAni);
	}

	/**
	* GET快捷技能
	*
	* @return 快捷技能
	*/
	public static final byte getQuickSkill(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.QuickSkill_Id);
	}

	/**
	* SET快捷技能
	*
	* @param quickSkill 快捷技能
	*/
	public static final void setOrPutQuickSkill(PropertyDictionary pd, byte quickSkill) {
		pd.setOrPutValue(MGPropertySymbolDefines.QuickSkill_Id, quickSkill);
	}

	/**
	* GET技能伤害
	*
	* @return 技能伤害
	*/
	public static final int getSkillDamage(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillDamage_Id);
	}

	/**
	* SET技能伤害
	*
	* @param skillDamage 技能伤害
	*/
	public static final void setOrPutSkillDamage(PropertyDictionary pd, int skillDamage) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillDamage_Id, skillDamage);
	}

	/**
	* GET技能伤害百分比
	*
	* @return 技能伤害百分比
	*/
	public static final int getSkillDamageRate(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillDamageRate_Id);
	}

	/**
	* SET技能伤害百分比
	*
	* @param skillDamageRate 技能伤害百分比
	*/
	public static final void setOrPutSkillDamageRate(PropertyDictionary pd, int skillDamageRate) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillDamageRate_Id, skillDamageRate);
	}

	/**
	* GET技能伤害几率百分比
	*
	* @return 技能伤害几率百分比
	*/
	public static final int getSkillDamageChance(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillDamageChance_Id);
	}

	/**
	* SET技能伤害几率百分比
	*
	* @param skillDamageChance 技能伤害几率百分比
	*/
	public static final void setOrPutSkillDamageChance(PropertyDictionary pd, int skillDamageChance) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillDamageChance_Id, skillDamageChance);
	}

	/**
	* GET技能伤害百分比最小值
	*
	* @return 技能伤害百分比最小值
	*/
	public static final int getSkillDamageRateMin(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillDamageRateMin_Id);
	}

	/**
	* SET技能伤害百分比最小值
	*
	* @param skillDamageRateMin 技能伤害百分比最小值
	*/
	public static final void setOrPutSkillDamageRateMin(PropertyDictionary pd, int skillDamageRateMin) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillDamageRateMin_Id, skillDamageRateMin);
	}

	/**
	* GET技能伤害百分比最大值
	*
	* @return 技能伤害百分比最大值
	*/
	public static final int getSkillDamageRateMax(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillDamageRateMax_Id);
	}

	/**
	* SET技能伤害百分比最大值
	*
	* @param skillDamageRateMax 技能伤害百分比最大值
	*/
	public static final void setOrPutSkillDamageRateMax(PropertyDictionary pd, int skillDamageRateMax) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillDamageRateMax_Id, skillDamageRateMax);
	}

	/**
	* GET向前移动格子数
	*
	* @return 向前移动格子数
	*/
	public static final int getMoveGridForward(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MoveGridForward_Id);
	}

	/**
	* SET向前移动格子数
	*
	* @param moveGridForward 向前移动格子数
	*/
	public static final void setOrPutMoveGridForward(PropertyDictionary pd, int moveGridForward) {
		pd.setOrPutValue(MGPropertySymbolDefines.MoveGridForward_Id, moveGridForward);
	}

	/**
	* GET向后移动格子数
	*
	* @return 向后移动格子数
	*/
	public static final int getMoveGridBackward(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MoveGridBackward_Id);
	}

	/**
	* SET向后移动格子数
	*
	* @param moveGridBackward 向后移动格子数
	*/
	public static final void setOrPutMoveGridBackward(PropertyDictionary pd, int moveGridBackward) {
		pd.setOrPutValue(MGPropertySymbolDefines.MoveGridBackward_Id, moveGridBackward);
	}

	/**
	* GETbuff组Id
	*
	* @return buff组Id
	*/
	public static final byte getBuffGroupId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BuffGroupId_Id);
	}

	/**
	* SETbuff组Id
	*
	* @param buffGroupId buff组Id
	*/
	public static final void setOrPutBuffGroupId(PropertyDictionary pd, byte buffGroupId) {
		pd.setOrPutValue(MGPropertySymbolDefines.BuffGroupId_Id, buffGroupId);
	}

	/**
	* GETbuff组权重
	*
	* @return buff组权重
	*/
	public static final byte getWeightOfGroup(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WeightOfGroup_Id);
	}

	/**
	* SETbuff组权重
	*
	* @param weightOfGroup buff组权重
	*/
	public static final void setOrPutWeightOfGroup(PropertyDictionary pd, byte weightOfGroup) {
		pd.setOrPutValue(MGPropertySymbolDefines.WeightOfGroup_Id, weightOfGroup);
	}

	/**
	* GETbuff组附加规则
	*
	* @return buff组附加规则
	*/
	public static final byte getAttachGorupRuleType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AttachGorupRuleType_Id);
	}

	/**
	* SETbuff组附加规则
	*
	* @param attachGorupRuleType buff组附加规则
	*/
	public static final void setOrPutAttachGorupRuleType(PropertyDictionary pd, byte attachGorupRuleType) {
		pd.setOrPutValue(MGPropertySymbolDefines.AttachGorupRuleType_Id, attachGorupRuleType);
	}

	/**
	* GETbuff组重复叠加规则
	*
	* @return buff组重复叠加规则
	*/
	public static final byte getAttachRepeatRuleType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AttachRepeatRuleType_Id);
	}

	/**
	* SETbuff组重复叠加规则
	*
	* @param attachRepeatRuleType buff组重复叠加规则
	*/
	public static final void setOrPutAttachRepeatRuleType(PropertyDictionary pd, byte attachRepeatRuleType) {
		pd.setOrPutValue(MGPropertySymbolDefines.AttachRepeatRuleType_Id, attachRepeatRuleType);
	}

	/**
	* GET持续类型
	*
	* @return 持续类型
	*/
	public static final byte getDurationType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.DurationType_Id);
	}

	/**
	* SET持续类型
	*
	* @param durationType 持续类型
	*/
	public static final void setOrPutDurationType(PropertyDictionary pd, byte durationType) {
		pd.setOrPutValue(MGPropertySymbolDefines.DurationType_Id, durationType);
	}

	/**
	* GET是否是周期效果buff
	*
	* @return 是否是周期效果buff
	*/
	public static final byte getIsPeriodAffectBuff(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsPeriodAffectBuff_Id);
	}

	/**
	* SET是否是周期效果buff
	*
	* @param isPeriodAffectBuff 是否是周期效果buff
	*/
	public static final void setOrPutIsPeriodAffectBuff(PropertyDictionary pd, byte isPeriodAffectBuff) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsPeriodAffectBuff_Id, isPeriodAffectBuff);
	}

	/**
	* GET周期时间
	*
	* @return 周期时间
	*/
	public static final int getPeriodAffectTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PeriodAffectTime_Id);
	}

	/**
	* SET周期时间
	*
	* @param periodAffectTime 周期时间
	*/
	public static final void setOrPutPeriodAffectTime(PropertyDictionary pd, int periodAffectTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.PeriodAffectTime_Id, periodAffectTime);
	}

	/**
	* GETbuff是否需要保存
	*
	* @return buff是否需要保存
	*/
	public static final byte getIsNeedSaveBuff(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsNeedSaveBuff_Id);
	}

	/**
	* SETbuff是否需要保存
	*
	* @param isNeedSaveBuff buff是否需要保存
	*/
	public static final void setOrPutIsNeedSaveBuff(PropertyDictionary pd, byte isNeedSaveBuff) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsNeedSaveBuff_Id, isNeedSaveBuff);
	}

	/**
	* GET死亡是否清除
	*
	* @return 死亡是否清除
	*/
	public static final byte getIsClearOnDeadBuff(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsClearOnDeadBuff_Id);
	}

	/**
	* SET死亡是否清除
	*
	* @param isClearOnDeadBuff 死亡是否清除
	*/
	public static final void setOrPutIsClearOnDeadBuff(PropertyDictionary pd, byte isClearOnDeadBuff) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsClearOnDeadBuff_Id, isClearOnDeadBuff);
	}

	/**
	* GET技能系数
	*
	* @return 技能系数
	*/
	public static final int getSkillCo(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillCo_Id);
	}

	/**
	* SET技能系数
	*
	* @param skillCo 技能系数
	*/
	public static final void setOrPutSkillCo(PropertyDictionary pd, int skillCo) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillCo_Id, skillCo);
	}

	/**
	* GET是否是有益buff
	*
	* @return 是否是有益buff
	*/
	public static final byte getIsPositiveBuff(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsPositiveBuff_Id);
	}

	/**
	* SET是否是有益buff
	*
	* @param isPositiveBuff 是否是有益buff
	*/
	public static final void setOrPutIsPositiveBuff(PropertyDictionary pd, byte isPositiveBuff) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsPositiveBuff_Id, isPositiveBuff);
	}

	/**
	* GETbuffRefId
	*
	* @return buffRefId
	*/
	public static final String getBuffRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BuffRefId_Id);
	}

	/**
	* SETbuffRefId
	*
	* @param buffRefId buffRefId
	*/
	public static final void setOrPutBuffRefId(PropertyDictionary pd, String buffRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.BuffRefId_Id, buffRefId);
	}

	/**
	* GETbuff动画Id
	*
	* @return buff动画Id
	*/
	public static final int getBuffAni(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BuffAni_Id);
	}

	/**
	* SETbuff动画Id
	*
	* @param buffAni buff动画Id
	*/
	public static final void setOrPutBuffAni(PropertyDictionary pd, int buffAni) {
		pd.setOrPutValue(MGPropertySymbolDefines.BuffAni_Id, buffAni);
	}

	/**
	* GETbuff重复叠加次数
	*
	* @return buff重复叠加次数
	*/
	public static final byte getAttachRepeatCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AttachRepeatCount_Id);
	}

	/**
	* SETbuff重复叠加次数
	*
	* @param attachRepeatCount buff重复叠加次数
	*/
	public static final void setOrPutAttachRepeatCount(PropertyDictionary pd, byte attachRepeatCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.AttachRepeatCount_Id, attachRepeatCount);
	}

	/**
	* GET技能伤害比率1
	*
	* @return 技能伤害比率1
	*/
	public static final int getSkillDamageRate1(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillDamageRate1_Id);
	}

	/**
	* SET技能伤害比率1
	*
	* @param skillDamageRate1 技能伤害比率1
	*/
	public static final void setOrPutSkillDamageRate1(PropertyDictionary pd, int skillDamageRate1) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillDamageRate1_Id, skillDamageRate1);
	}

	/**
	* GET技能伤害比率2
	*
	* @return 技能伤害比率2
	*/
	public static final int getSkillDamageRate2(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillDamageRate2_Id);
	}

	/**
	* SET技能伤害比率2
	*
	* @param skillDamageRate2 技能伤害比率2
	*/
	public static final void setOrPutSkillDamageRate2(PropertyDictionary pd, int skillDamageRate2) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillDamageRate2_Id, skillDamageRate2);
	}

	/**
	* GETbuff来源
	*
	* @return buff来源
	*/
	public static final String getBuffSourece(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BuffSourece_Id);
	}

	/**
	* SETbuff来源
	*
	* @param buffSourece buff来源
	*/
	public static final void setOrPutBuffSourece(PropertyDictionary pd, String buffSourece) {
		pd.setOrPutValue(MGPropertySymbolDefines.BuffSourece_Id, buffSourece);
	}

	/**
	* GET是否是改变战斗属性值得buff
	*
	* @return 是否是改变战斗属性值得buff
	*/
	public static final byte getIsChangeFightValueBuff(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsChangeFightValueBuff_Id);
	}

	/**
	* SET是否是改变战斗属性值得buff
	*
	* @param isChangeFightValueBuff 是否是改变战斗属性值得buff
	*/
	public static final void setOrPutIsChangeFightValueBuff(PropertyDictionary pd, byte isChangeFightValueBuff) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsChangeFightValueBuff_Id, isChangeFightValueBuff);
	}

	/**
	* GET技能CD时间
	*
	* @return 技能CD时间
	*/
	public static final int getSkillCDTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SkillCDTime_Id);
	}

	/**
	* SET技能CD时间
	*
	* @param skillCDTime 技能CD时间
	*/
	public static final void setOrPutSkillCDTime(PropertyDictionary pd, int skillCDTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.SkillCDTime_Id, skillCDTime);
	}

	/**
	* GET宽
	*
	* @return 宽
	*/
	public static final int getWidth(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Width_Id);
	}

	/**
	* SET宽
	*
	* @param width 宽
	*/
	public static final void setOrPutWidth(PropertyDictionary pd, int width) {
		pd.setOrPutValue(MGPropertySymbolDefines.Width_Id, width);
	}

	/**
	* GET高
	*
	* @return 高
	*/
	public static final int getHeight(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Height_Id);
	}

	/**
	* SET高
	*
	* @param height 高
	*/
	public static final void setOrPutHeight(PropertyDictionary pd, int height) {
		pd.setOrPutValue(MGPropertySymbolDefines.Height_Id, height);
	}

	/**
	* GET格子宽
	*
	* @return 格子宽
	*/
	public static final int getGirdWidth(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.GirdWidth_Id);
	}

	/**
	* SET格子宽
	*
	* @param girdWidth 格子宽
	*/
	public static final void setOrPutGirdWidth(PropertyDictionary pd, int girdWidth) {
		pd.setOrPutValue(MGPropertySymbolDefines.GirdWidth_Id, girdWidth);
	}

	/**
	* GET格子高
	*
	* @return 格子高
	*/
	public static final int getGridHeight(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.GridHeight_Id);
	}

	/**
	* SET格子高
	*
	* @param gridHeight 格子高
	*/
	public static final void setOrPutGridHeight(PropertyDictionary pd, int gridHeight) {
		pd.setOrPutValue(MGPropertySymbolDefines.GridHeight_Id, gridHeight);
	}

	/**
	* GETx坐标位置
	*
	* @return x坐标位置
	*/
	public static final int getPositionX(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PositionX_Id);
	}

	/**
	* SETx坐标位置
	*
	* @param positionX x坐标位置
	*/
	public static final void setOrPutPositionX(PropertyDictionary pd, int positionX) {
		pd.setOrPutValue(MGPropertySymbolDefines.PositionX_Id, positionX);
	}

	/**
	* GETy坐标位置
	*
	* @return y坐标位置
	*/
	public static final int getPositionY(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PositionY_Id);
	}

	/**
	* SETy坐标位置
	*
	* @param positionY y坐标位置
	*/
	public static final void setOrPutPositionY(PropertyDictionary pd, int positionY) {
		pd.setOrPutValue(MGPropertySymbolDefines.PositionY_Id, positionY);
	}

	/**
	* GET音乐Id
	*
	* @return 音乐Id
	*/
	public static final String getMusicId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MusicId_Id);
	}

	/**
	* SET音乐Id
	*
	* @param musicId 音乐Id
	*/
	public static final void setOrPutMusicId(PropertyDictionary pd, String musicId) {
		pd.setOrPutValue(MGPropertySymbolDefines.MusicId_Id, musicId);
	}

	/**
	* GET场景对立状态
	*
	* @return 场景对立状态
	*/
	public static final byte getOpposeState(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OpposeState_Id);
	}

	/**
	* SET场景对立状态
	*
	* @param opposeState 场景对立状态
	*/
	public static final void setOrPutOpposeState(PropertyDictionary pd, byte opposeState) {
		pd.setOrPutValue(MGPropertySymbolDefines.OpposeState_Id, opposeState);
	}

	/**
	* GET开放等级
	*
	* @return 开放等级
	*/
	public static final int getOpenLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OpenLevel_Id);
	}

	/**
	* SET开放等级
	*
	* @param openLevel 开放等级
	*/
	public static final void setOrPutOpenLevel(PropertyDictionary pd, int openLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.OpenLevel_Id, openLevel);
	}

	/**
	* GET开放时间
	*
	* @return 开放时间
	*/
	public static final String getOpenTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OpenTime_Id);
	}

	/**
	* SET开放时间
	*
	* @param openTime 开放时间
	*/
	public static final void setOrPutOpenTime(PropertyDictionary pd, String openTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.OpenTime_Id, openTime);
	}

	/**
	* GET开放任务
	*
	* @return 开放任务
	*/
	public static final String getOpenQuest(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OpenQuest_Id);
	}

	/**
	* SET开放任务
	*
	* @param openQuest 开放任务
	*/
	public static final void setOrPutOpenQuest(PropertyDictionary pd, String openQuest) {
		pd.setOrPutValue(MGPropertySymbolDefines.OpenQuest_Id, openQuest);
	}

	/**
	* GET场景引用编号
	*
	* @return 场景引用编号
	*/
	public static final String getSceneRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SceneRefId_Id);
	}

	/**
	* SET场景引用编号
	*
	* @param sceneRefId 场景引用编号
	*/
	public static final void setOrPutSceneRefId(PropertyDictionary pd, String sceneRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.SceneRefId_Id, sceneRefId);
	}

	/**
	* GET怪物refId
	*
	* @return 怪物refId
	*/
	public static final String getMonsterRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MonsterRefId_Id);
	}

	/**
	* SET怪物refId
	*
	* @param monsterRefId 怪物refId
	*/
	public static final void setOrPutMonsterRefId(PropertyDictionary pd, String monsterRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.MonsterRefId_Id, monsterRefId);
	}

	/**
	* GET怪物刷新规则类型
	*
	* @return 怪物刷新规则类型
	*/
	public static final byte getRefreshType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RefreshType_Id);
	}

	/**
	* SET怪物刷新规则类型
	*
	* @param refreshType 怪物刷新规则类型
	*/
	public static final void setOrPutRefreshType(PropertyDictionary pd, byte refreshType) {
		pd.setOrPutValue(MGPropertySymbolDefines.RefreshType_Id, refreshType);
	}

	/**
	* GET怪物刷新规则类型具体数据
	*
	* @return 怪物刷新规则类型具体数据
	*/
	public static final String getRefreshTypeData(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RefreshTypeData_Id);
	}

	/**
	* SET怪物刷新规则类型具体数据
	*
	* @param refreshTypeData 怪物刷新规则类型具体数据
	*/
	public static final void setOrPutRefreshTypeData(PropertyDictionary pd, String refreshTypeData) {
		pd.setOrPutValue(MGPropertySymbolDefines.RefreshTypeData_Id, refreshTypeData);
	}

	/**
	* GET刷新数量
	*
	* @return 刷新数量
	*/
	public static final byte getRefreshCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RefreshCount_Id);
	}

	/**
	* SET刷新数量
	*
	* @param refreshCount 刷新数量
	*/
	public static final void setOrPutRefreshCount(PropertyDictionary pd, byte refreshCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.RefreshCount_Id, refreshCount);
	}

	/**
	* GET刷新延迟时间
	*
	* @return 刷新延迟时间
	*/
	public static final byte getRefreshDelayTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RefreshDelayTime_Id);
	}

	/**
	* SET刷新延迟时间
	*
	* @param refreshDelayTime 刷新延迟时间
	*/
	public static final void setOrPutRefreshDelayTime(PropertyDictionary pd, byte refreshDelayTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.RefreshDelayTime_Id, refreshDelayTime);
	}

	/**
	* GET出生区类型
	*
	* @return 出生区类型
	*/
	public static final byte getBirthRegionType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BirthRegionType_Id);
	}

	/**
	* SET出生区类型
	*
	* @param birthRegionType 出生区类型
	*/
	public static final void setOrPutBirthRegionType(PropertyDictionary pd, byte birthRegionType) {
		pd.setOrPutValue(MGPropertySymbolDefines.BirthRegionType_Id, birthRegionType);
	}

	/**
	* GET挂机点
	*
	* @return 挂机点
	*/
	public static final String getHandupPoint(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.HandupPoint_Id);
	}

	/**
	* SET挂机点
	*
	* @param handupPoint 挂机点
	*/
	public static final void setOrPutHandupPoint(PropertyDictionary pd, String handupPoint) {
		pd.setOrPutValue(MGPropertySymbolDefines.HandupPoint_Id, handupPoint);
	}

	/**
	* GET玩家之前的场景
	*
	* @return 玩家之前的场景
	*/
	public static final String getBeforeSceneRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BeforeSceneRefId_Id);
	}

	/**
	* SET玩家之前的场景
	*
	* @param beforeSceneRefId 玩家之前的场景
	*/
	public static final void setOrPutBeforeSceneRefId(PropertyDictionary pd, String beforeSceneRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.BeforeSceneRefId_Id, beforeSceneRefId);
	}

	/**
	* GET玩家之前x坐标
	*
	* @return 玩家之前x坐标
	*/
	public static final int getBeforeX(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BeforeX_Id);
	}

	/**
	* SET玩家之前x坐标
	*
	* @param beforeX 玩家之前x坐标
	*/
	public static final void setOrPutBeforeX(PropertyDictionary pd, int beforeX) {
		pd.setOrPutValue(MGPropertySymbolDefines.BeforeX_Id, beforeX);
	}

	/**
	* GET玩家之前y坐标
	*
	* @return 玩家之前y坐标
	*/
	public static final int getBeforeY(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BeforeY_Id);
	}

	/**
	* SET玩家之前y坐标
	*
	* @param beforeY 玩家之前y坐标
	*/
	public static final void setOrPutBeforeY(PropertyDictionary pd, int beforeY) {
		pd.setOrPutValue(MGPropertySymbolDefines.BeforeY_Id, beforeY);
	}

	/**
	* GET归属玩家ID
	*
	* @return 归属玩家ID
	*/
	public static final String getOwnerId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OwnerId_Id);
	}

	/**
	* SET归属玩家ID
	*
	* @param ownerId 归属玩家ID
	*/
	public static final void setOrPutOwnerId(PropertyDictionary pd, String ownerId) {
		pd.setOrPutValue(MGPropertySymbolDefines.OwnerId_Id, ownerId);
	}

	/**
	* GET离线背包状态
	*
	* @return 离线背包状态
	*/
	public static final byte getOfflineBagState(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OfflineBagState_Id);
	}

	/**
	* SET离线背包状态
	*
	* @param offlineBagState 离线背包状态
	*/
	public static final void setOrPutOfflineBagState(PropertyDictionary pd, byte offlineBagState) {
		pd.setOrPutValue(MGPropertySymbolDefines.OfflineBagState_Id, offlineBagState);
	}

	/**
	* GET玩家在线天数
	*
	* @return 玩家在线天数
	*/
	public static final int getPlayerOnlineDays(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PlayerOnlineDays_Id);
	}

	/**
	* SET玩家在线天数
	*
	* @param playerOnlineDays 玩家在线天数
	*/
	public static final void setOrPutPlayerOnlineDays(PropertyDictionary pd, int playerOnlineDays) {
		pd.setOrPutValue(MGPropertySymbolDefines.PlayerOnlineDays_Id, playerOnlineDays);
	}

	/**
	* GET玩家登陆次数
	*
	* @return 玩家登陆次数
	*/
	public static final int getPlayerLoginTimes(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PlayerLoginTimes_Id);
	}

	/**
	* SET玩家登陆次数
	*
	* @param playerLoginTimes 玩家登陆次数
	*/
	public static final void setOrPutPlayerLoginTimes(PropertyDictionary pd, int playerLoginTimes) {
		pd.setOrPutValue(MGPropertySymbolDefines.PlayerLoginTimes_Id, playerLoginTimes);
	}

	/**
	* GET刷新间隔时间
	*
	* @return 刷新间隔时间
	*/
	public static final int getRefreshTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RefreshTime_Id);
	}

	/**
	* SET刷新间隔时间
	*
	* @param refreshTime 刷新间隔时间
	*/
	public static final void setOrPutRefreshTime(PropertyDictionary pd, int refreshTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.RefreshTime_Id, refreshTime);
	}

	/**
	* GET阶级
	*
	* @return 阶级
	*/
	public static final byte getStageLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StageLevel_Id);
	}

	/**
	* SET阶级
	*
	* @param stageLevel 阶级
	*/
	public static final void setOrPutStageLevel(PropertyDictionary pd, byte stageLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.StageLevel_Id, stageLevel);
	}

	/**
	* GET星级
	*
	* @return 星级
	*/
	public static final byte getStartLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StartLevel_Id);
	}

	/**
	* SET星级
	*
	* @param startLevel 星级
	*/
	public static final void setOrPutStartLevel(PropertyDictionary pd, byte startLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.StartLevel_Id, startLevel);
	}

	/**
	* GET上级编号
	*
	* @return 上级编号
	*/
	public static final String getRidePreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RidePreRefId_Id);
	}

	/**
	* SET上级编号
	*
	* @param ridePreRefId 上级编号
	*/
	public static final void setOrPutRidePreRefId(PropertyDictionary pd, String ridePreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.RidePreRefId_Id, ridePreRefId);
	}

	/**
	* GET下级编号
	*
	* @return 下级编号
	*/
	public static final String getRideNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RideNextRefId_Id);
	}

	/**
	* SET下级编号
	*
	* @param rideNextRefId 下级编号
	*/
	public static final void setOrPutRideNextRefId(PropertyDictionary pd, String rideNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.RideNextRefId_Id, rideNextRefId);
	}

	/**
	* GET坐骑丹最大消耗
	*
	* @return 坐骑丹最大消耗
	*/
	public static final byte getRideMedicineMaxConsume(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RideMedicineMaxConsume_Id);
	}

	/**
	* SET坐骑丹最大消耗
	*
	* @param rideMedicineMaxConsume 坐骑丹最大消耗
	*/
	public static final void setOrPutRideMedicineMaxConsume(PropertyDictionary pd, byte rideMedicineMaxConsume) {
		pd.setOrPutValue(MGPropertySymbolDefines.RideMedicineMaxConsume_Id, rideMedicineMaxConsume);
	}

	/**
	* GET升级资源消耗
	*
	* @return 升级资源消耗
	*/
	public static final String getRideUpgradeSrcConsume(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RideUpgradeSrcConsume_Id);
	}

	/**
	* SET升级资源消耗
	*
	* @param rideUpgradeSrcConsume 升级资源消耗
	*/
	public static final void setOrPutRideUpgradeSrcConsume(PropertyDictionary pd, String rideUpgradeSrcConsume) {
		pd.setOrPutValue(MGPropertySymbolDefines.RideUpgradeSrcConsume_Id, rideUpgradeSrcConsume);
	}

	/**
	* GET翅膀等级
	*
	* @return 翅膀等级
	*/
	public static final byte getWingLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WingLevel_Id);
	}

	/**
	* SET翅膀等级
	*
	* @param wingLevel 翅膀等级
	*/
	public static final void setOrPutWingLevel(PropertyDictionary pd, byte wingLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.WingLevel_Id, wingLevel);
	}

	/**
	* GET坐骑状态
	*
	* @return 坐骑状态
	*/
	public static final byte getRideState(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RideState_Id);
	}

	/**
	* SET坐骑状态
	*
	* @param rideState 坐骑状态
	*/
	public static final void setOrPutRideState(PropertyDictionary pd, byte rideState) {
		pd.setOrPutValue(MGPropertySymbolDefines.RideState_Id, rideState);
	}

	/**
	* GET翅膀上级编号
	*
	* @return 翅膀上级编号
	*/
	public static final String getWingPreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WingPreRefId_Id);
	}

	/**
	* SET翅膀上级编号
	*
	* @param wingPreRefId 翅膀上级编号
	*/
	public static final void setOrPutWingPreRefId(PropertyDictionary pd, String wingPreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.WingPreRefId_Id, wingPreRefId);
	}

	/**
	* GET翅膀下级编号
	*
	* @return 翅膀下级编号
	*/
	public static final String getWingNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WingNextRefId_Id);
	}

	/**
	* SET翅膀下级编号
	*
	* @param wingNextRefId 翅膀下级编号
	*/
	public static final void setOrPutWingNextRefId(PropertyDictionary pd, String wingNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.WingNextRefId_Id, wingNextRefId);
	}

	/**
	* GET法宝等级
	*
	* @return 法宝等级
	*/
	public static final byte getTalisManLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TalisManLevel_Id);
	}

	/**
	* SET法宝等级
	*
	* @param talisManLevel 法宝等级
	*/
	public static final void setOrPutTalisManLevel(PropertyDictionary pd, byte talisManLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.TalisManLevel_Id, talisManLevel);
	}

	/**
	* GET法宝refId
	*
	* @return 法宝refId
	*/
	public static final String getTalisRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TalisRefId_Id);
	}

	/**
	* SET法宝refId
	*
	* @param talisRefId 法宝refId
	*/
	public static final void setOrPutTalisRefId(PropertyDictionary pd, String talisRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.TalisRefId_Id, talisRefId);
	}

	/**
	* GET法宝类型
	*
	* @return 法宝类型
	*/
	public static final byte getTailsmanType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TailsmanType_Id);
	}

	/**
	* SET法宝类型
	*
	* @param tailsmanType 法宝类型
	*/
	public static final void setOrPutTailsmanType(PropertyDictionary pd, byte tailsmanType) {
		pd.setOrPutValue(MGPropertySymbolDefines.TailsmanType_Id, tailsmanType);
	}

	/**
	* GET等级
	*
	* @return 等级
	*/
	public static final int getLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Level_Id);
	}

	/**
	* SET等级
	*
	* @param level 等级
	*/
	public static final void setOrPutLevel(PropertyDictionary pd, int level) {
		pd.setOrPutValue(MGPropertySymbolDefines.Level_Id, level);
	}

	/**
	* GET经验
	*
	* @return 经验
	*/
	public static final long getExp(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Exp_Id);
	}

	/**
	* SET经验
	*
	* @param exp 经验
	*/
	public static final void setOrPutExp(PropertyDictionary pd, long exp) {
		pd.setOrPutValue(MGPropertySymbolDefines.Exp_Id, exp);
	}

	/**
	* GET性别
	*
	* @return 性别
	*/
	public static final byte getGender(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Gender_Id);
	}

	/**
	* SET性别
	*
	* @param gender 性别
	*/
	public static final void setOrPutGender(PropertyDictionary pd, byte gender) {
		pd.setOrPutValue(MGPropertySymbolDefines.Gender_Id, gender);
	}

	/**
	* GET种类
	*
	* @return 种类
	*/
	public static final byte getKind(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Kind_Id);
	}

	/**
	* SET种类
	*
	* @param kind 种类
	*/
	public static final void setOrPutKind(PropertyDictionary pd, byte kind) {
		pd.setOrPutValue(MGPropertySymbolDefines.Kind_Id, kind);
	}

	/**
	* GET年龄
	*
	* @return 年龄
	*/
	public static final short getAge(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Age_Id);
	}

	/**
	* SET年龄
	*
	* @param age 年龄
	*/
	public static final void setOrPutAge(PropertyDictionary pd, short age) {
		pd.setOrPutValue(MGPropertySymbolDefines.Age_Id, age);
	}

	/**
	* GET金币
	*
	* @return 金币
	*/
	public static final int getGold(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Gold_Id);
	}

	/**
	* SET金币
	*
	* @param gold 金币
	*/
	public static final void setOrPutGold(PropertyDictionary pd, int gold) {
		pd.setOrPutValue(MGPropertySymbolDefines.Gold_Id, gold);
	}

	/**
	* GET绑定金
	*
	* @return 绑定金
	*/
	public static final int getBindedGold(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BindedGold_Id);
	}

	/**
	* SET绑定金
	*
	* @param bindedGold 绑定金
	*/
	public static final void setOrPutBindedGold(PropertyDictionary pd, int bindedGold) {
		pd.setOrPutValue(MGPropertySymbolDefines.BindedGold_Id, bindedGold);
	}

	/**
	* GET非绑定金
	*
	* @return 非绑定金
	*/
	public static final int getUnbindedGold(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UnbindedGold_Id);
	}

	/**
	* SET非绑定金
	*
	* @param unbindedGold 非绑定金
	*/
	public static final void setOrPutUnbindedGold(PropertyDictionary pd, int unbindedGold) {
		pd.setOrPutValue(MGPropertySymbolDefines.UnbindedGold_Id, unbindedGold);
	}

	/**
	* GET铜币
	*
	* @return 铜币
	*/
	public static final int getCopper(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Copper_Id);
	}

	/**
	* SET铜币
	*
	* @param copper 铜币
	*/
	public static final void setOrPutCopper(PropertyDictionary pd, int copper) {
		pd.setOrPutValue(MGPropertySymbolDefines.Copper_Id, copper);
	}

	/**
	* GET绑定铜币
	*
	* @return 绑定铜币
	*/
	public static final int getBindedCopper(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BindedCopper_Id);
	}

	/**
	* SET绑定铜币
	*
	* @param bindedCopper 绑定铜币
	*/
	public static final void setOrPutBindedCopper(PropertyDictionary pd, int bindedCopper) {
		pd.setOrPutValue(MGPropertySymbolDefines.BindedCopper_Id, bindedCopper);
	}

	/**
	* GET非绑定铜币
	*
	* @return 非绑定铜币
	*/
	public static final int getUnbindedCopper(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UnbindedCopper_Id);
	}

	/**
	* SET非绑定铜币
	*
	* @param unbindedCopper 非绑定铜币
	*/
	public static final void setOrPutUnbindedCopper(PropertyDictionary pd, int unbindedCopper) {
		pd.setOrPutValue(MGPropertySymbolDefines.UnbindedCopper_Id, unbindedCopper);
	}

	/**
	* GET礼券金
	*
	* @return 礼券金
	*/
	public static final int getGiftGold(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.GiftGold_Id);
	}

	/**
	* SET礼券金
	*
	* @param giftGold 礼券金
	*/
	public static final void setOrPutGiftGold(PropertyDictionary pd, int giftGold) {
		pd.setOrPutValue(MGPropertySymbolDefines.GiftGold_Id, giftGold);
	}

	/**
	* GETCD时间
	*
	* @return CD时间
	*/
	public static final int getCDTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CDTime_Id);
	}

	/**
	* SETCD时间
	*
	* @param CDTime CD时间
	*/
	public static final void setOrPutCDTime(PropertyDictionary pd, int CDTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.CDTime_Id, CDTime);
	}

	/**
	* GET图标Id
	*
	* @return 图标Id
	*/
	public static final String getIconId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IconId_Id);
	}

	/**
	* SET图标Id
	*
	* @param iconId 图标Id
	*/
	public static final void setOrPutIconId(PropertyDictionary pd, String iconId) {
		pd.setOrPutValue(MGPropertySymbolDefines.IconId_Id, iconId);
	}

	/**
	* GET模型Id
	*
	* @return 模型Id
	*/
	public static final int getModelId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ModelId_Id);
	}

	/**
	* SET模型Id
	*
	* @param modelId 模型Id
	*/
	public static final void setOrPutModelId(PropertyDictionary pd, int modelId) {
		pd.setOrPutValue(MGPropertySymbolDefines.ModelId_Id, modelId);
	}

	/**
	* GET保持距离
	*
	* @return 保持距离
	*/
	public static final int getKeepSpace(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KeepSpace_Id);
	}

	/**
	* SET保持距离
	*
	* @param keepSpace 保持距离
	*/
	public static final void setOrPutKeepSpace(PropertyDictionary pd, int keepSpace) {
		pd.setOrPutValue(MGPropertySymbolDefines.KeepSpace_Id, keepSpace);
	}

	/**
	* GET品质
	*
	* @return 品质
	*/
	public static final byte getQuality(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Quality_Id);
	}

	/**
	* SET品质
	*
	* @param quality 品质
	*/
	public static final void setOrPutQuality(PropertyDictionary pd, byte quality) {
		pd.setOrPutValue(MGPropertySymbolDefines.Quality_Id, quality);
	}

	/**
	* GET爵位
	*
	* @return 爵位
	*/
	public static final byte getKnight(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Knight_Id);
	}

	/**
	* SET爵位
	*
	* @param knight 爵位
	*/
	public static final void setOrPutKnight(PropertyDictionary pd, byte knight) {
		pd.setOrPutValue(MGPropertySymbolDefines.Knight_Id, knight);
	}

	/**
	* GET职业Id
	*
	* @return 职业Id
	*/
	public static final byte getProfessionId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ProfessionId_Id);
	}

	/**
	* SET职业Id
	*
	* @param professionId 职业Id
	*/
	public static final void setOrPutProfessionId(PropertyDictionary pd, byte professionId) {
		pd.setOrPutValue(MGPropertySymbolDefines.ProfessionId_Id, professionId);
	}

	/**
	* GET最大经验
	*
	* @return 最大经验
	*/
	public static final long getMaxExp(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxExp_Id);
	}

	/**
	* SET最大经验
	*
	* @param maxExp 最大经验
	*/
	public static final void setOrPutMaxExp(PropertyDictionary pd, long maxExp) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxExp_Id, maxExp);
	}

	/**
	* GET概率
	*
	* @return 概率
	*/
	public static final int getProbability(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Probability_Id);
	}

	/**
	* SET概率
	*
	* @param probability 概率
	*/
	public static final void setOrPutProbability(PropertyDictionary pd, int probability) {
		pd.setOrPutValue(MGPropertySymbolDefines.Probability_Id, probability);
	}

	/**
	* GET数量
	*
	* @return 数量
	*/
	public static final int getNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Number_Id);
	}

	/**
	* SET数量
	*
	* @param number 数量
	*/
	public static final void setOrPutNumber(PropertyDictionary pd, int number) {
		pd.setOrPutValue(MGPropertySymbolDefines.Number_Id, number);
	}

	/**
	* GET公会名称
	*
	* @return 公会名称
	*/
	public static final String getUnionName(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UnionName_Id);
	}

	/**
	* SET公会名称
	*
	* @param unionName 公会名称
	*/
	public static final void setOrPutUnionName(PropertyDictionary pd, String unionName) {
		pd.setOrPutValue(MGPropertySymbolDefines.UnionName_Id, unionName);
	}

	/**
	* GET人物等级
	*
	* @return 人物等级
	*/
	public static final byte getRoleGrade(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RoleGrade_Id);
	}

	/**
	* SET人物等级
	*
	* @param roleGrade 人物等级
	*/
	public static final void setOrPutRoleGrade(PropertyDictionary pd, byte roleGrade) {
		pd.setOrPutValue(MGPropertySymbolDefines.RoleGrade_Id, roleGrade);
	}

	/**
	* GET上级编号
	*
	* @return 上级编号
	*/
	public static final String getKnightPreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KnightPreRefId_Id);
	}

	/**
	* SET上级编号
	*
	* @param knightPreRefId 上级编号
	*/
	public static final void setOrPutKnightPreRefId(PropertyDictionary pd, String knightPreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.KnightPreRefId_Id, knightPreRefId);
	}

	/**
	* GET下级编号
	*
	* @return 下级编号
	*/
	public static final String getKnightNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KnightNextRefId_Id);
	}

	/**
	* SET下级编号
	*
	* @param knightNextRefId 下级编号
	*/
	public static final void setOrPutKnightNextRefId(PropertyDictionary pd, String knightNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.KnightNextRefId_Id, knightNextRefId);
	}

	/**
	* GET任务refId
	*
	* @return 任务refId
	*/
	public static final String getQuestRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.QuestRefId_Id);
	}

	/**
	* SET任务refId
	*
	* @param questRefId 任务refId
	*/
	public static final void setOrPutQuestRefId(PropertyDictionary pd, String questRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.QuestRefId_Id, questRefId);
	}

	/**
	* GET天次数
	*
	* @return 天次数
	*/
	public static final short getTimesADay(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TimesADay_Id);
	}

	/**
	* SET天次数
	*
	* @param timesADay 天次数
	*/
	public static final void setOrPutTimesADay(PropertyDictionary pd, short timesADay) {
		pd.setOrPutValue(MGPropertySymbolDefines.TimesADay_Id, timesADay);
	}

	/**
	* GET周次数
	*
	* @return 周次数
	*/
	public static final short getTimesAWeek(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TimesAWeek_Id);
	}

	/**
	* SET周次数
	*
	* @param timesAWeek 周次数
	*/
	public static final void setOrPutTimesAWeek(PropertyDictionary pd, short timesAWeek) {
		pd.setOrPutValue(MGPropertySymbolDefines.TimesAWeek_Id, timesAWeek);
	}

	/**
	* GET副本组成
	*
	* @return 副本组成
	*/
	public static final String getStructureDetails(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StructureDetails_Id);
	}

	/**
	* SET副本组成
	*
	* @param structureDetails 副本组成
	*/
	public static final void setOrPutStructureDetails(PropertyDictionary pd, String structureDetails) {
		pd.setOrPutValue(MGPropertySymbolDefines.StructureDetails_Id, structureDetails);
	}

	/**
	* GET是否组队
	*
	* @return 是否组队
	*/
	public static final byte getIsTeam(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsTeam_Id);
	}

	/**
	* SET是否组队
	*
	* @param isTeam 是否组队
	*/
	public static final void setOrPutIsTeam(PropertyDictionary pd, byte isTeam) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsTeam_Id, isTeam);
	}

	/**
	* GET怪物组编号
	*
	* @return 怪物组编号
	*/
	public static final String getMonsterGroupRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MonsterGroupRefId_Id);
	}

	/**
	* SET怪物组编号
	*
	* @param monsterGroupRefId 怪物组编号
	*/
	public static final void setOrPutMonsterGroupRefId(PropertyDictionary pd, String monsterGroupRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.MonsterGroupRefId_Id, monsterGroupRefId);
	}

	/**
	* GET出生条件类型
	*
	* @return 出生条件类型
	*/
	public static final byte getAriseType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AriseType_Id);
	}

	/**
	* SET出生条件类型
	*
	* @param ariseType 出生条件类型
	*/
	public static final void setOrPutAriseType(PropertyDictionary pd, byte ariseType) {
		pd.setOrPutValue(MGPropertySymbolDefines.AriseType_Id, ariseType);
	}

	/**
	* GET重生条件类型
	*
	* @return 重生条件类型
	*/
	public static final byte getReappearType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ReappearType_Id);
	}

	/**
	* SET重生条件类型
	*
	* @param reappearType 重生条件类型
	*/
	public static final void setOrPutReappearType(PropertyDictionary pd, byte reappearType) {
		pd.setOrPutValue(MGPropertySymbolDefines.ReappearType_Id, reappearType);
	}

	/**
	* GET刷新区域X坐标(左上角)
	*
	* @return 刷新区域X坐标(左上角)
	*/
	public static final int getX_left_up(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.X_left_up_Id);
	}

	/**
	* SET刷新区域X坐标(左上角)
	*
	* @param x_left_up 刷新区域X坐标(左上角)
	*/
	public static final void setOrPutX_left_up(PropertyDictionary pd, int x_left_up) {
		pd.setOrPutValue(MGPropertySymbolDefines.X_left_up_Id, x_left_up);
	}

	/**
	* GET刷新区域X坐标(左上角)
	*
	* @return 刷新区域X坐标(左上角)
	*/
	public static final int getY_left_up(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Y_left_up_Id);
	}

	/**
	* SET刷新区域X坐标(左上角)
	*
	* @param y_left_up 刷新区域X坐标(左上角)
	*/
	public static final void setOrPutY_left_up(PropertyDictionary pd, int y_left_up) {
		pd.setOrPutValue(MGPropertySymbolDefines.Y_left_up_Id, y_left_up);
	}

	/**
	* GET刷新区域X坐标(右下角)
	*
	* @return 刷新区域X坐标(右下角)
	*/
	public static final int getX_right_down(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.X_right_down_Id);
	}

	/**
	* SET刷新区域X坐标(右下角)
	*
	* @param x_right_down 刷新区域X坐标(右下角)
	*/
	public static final void setOrPutX_right_down(PropertyDictionary pd, int x_right_down) {
		pd.setOrPutValue(MGPropertySymbolDefines.X_right_down_Id, x_right_down);
	}

	/**
	* GET刷新区域X坐标(右下角)
	*
	* @return 刷新区域X坐标(右下角)
	*/
	public static final int getY_right_down(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Y_right_down_Id);
	}

	/**
	* SET刷新区域X坐标(右下角)
	*
	* @param y_right_down 刷新区域X坐标(右下角)
	*/
	public static final void setOrPutY_right_down(PropertyDictionary pd, int y_right_down) {
		pd.setOrPutValue(MGPropertySymbolDefines.Y_right_down_Id, y_right_down);
	}

	/**
	* GET成功完成类型
	*
	* @return 成功完成类型
	*/
	public static final byte getSucceedType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SucceedType_Id);
	}

	/**
	* SET成功完成类型
	*
	* @param succeedType 成功完成类型
	*/
	public static final void setOrPutSucceedType(PropertyDictionary pd, byte succeedType) {
		pd.setOrPutValue(MGPropertySymbolDefines.SucceedType_Id, succeedType);
	}

	/**
	* GET持续时间
	*
	* @return 持续时间
	*/
	public static final int getDuration(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Duration_Id);
	}

	/**
	* SET持续时间
	*
	* @param duration 持续时间
	*/
	public static final void setOrPutDuration(PropertyDictionary pd, int duration) {
		pd.setOrPutValue(MGPropertySymbolDefines.Duration_Id, duration);
	}

	/**
	* GET副本数据
	*
	* @return 副本数据
	*/
	public static final String getGameInstanceData(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.GameInstanceData_Id);
	}

	/**
	* SET副本数据
	*
	* @param gameInstanceData 副本数据
	*/
	public static final void setOrPutGameInstanceData(PropertyDictionary pd, String gameInstanceData) {
		pd.setOrPutValue(MGPropertySymbolDefines.GameInstanceData_Id, gameInstanceData);
	}

	/**
	* GET公会官职Id
	*
	* @return 公会官职Id
	*/
	public static final byte getUnionOfficialId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UnionOfficialId_Id);
	}

	/**
	* SET公会官职Id
	*
	* @param unionOfficialId 公会官职Id
	*/
	public static final void setOrPutUnionOfficialId(PropertyDictionary pd, byte unionOfficialId) {
		pd.setOrPutValue(MGPropertySymbolDefines.UnionOfficialId_Id, unionOfficialId);
	}

	/**
	* GET金牌
	*
	* @return 金牌
	*/
	public static final int getGoldMedal(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.GoldMedal_Id);
	}

	/**
	* SET金牌
	*
	* @param goldMedal 金牌
	*/
	public static final void setOrPutGoldMedal(PropertyDictionary pd, int goldMedal) {
		pd.setOrPutValue(MGPropertySymbolDefines.GoldMedal_Id, goldMedal);
	}

	/**
	* GET银牌
	*
	* @return 银牌
	*/
	public static final int getSilverMedal(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SilverMedal_Id);
	}

	/**
	* SET银牌
	*
	* @param silverMedal 银牌
	*/
	public static final void setOrPutSilverMedal(PropertyDictionary pd, int silverMedal) {
		pd.setOrPutValue(MGPropertySymbolDefines.SilverMedal_Id, silverMedal);
	}

	/**
	* GET铜牌
	*
	* @return 铜牌
	*/
	public static final int getCopperMedal(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CopperMedal_Id);
	}

	/**
	* SET铜牌
	*
	* @param copperMedal 铜牌
	*/
	public static final void setOrPutCopperMedal(PropertyDictionary pd, int copperMedal) {
		pd.setOrPutValue(MGPropertySymbolDefines.CopperMedal_Id, copperMedal);
	}

	/**
	* GET铁牌
	*
	* @return 铁牌
	*/
	public static final int getIronMedal(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IronMedal_Id);
	}

	/**
	* SET铁牌
	*
	* @param ironMedal 铁牌
	*/
	public static final void setOrPutIronMedal(PropertyDictionary pd, int ironMedal) {
		pd.setOrPutValue(MGPropertySymbolDefines.IronMedal_Id, ironMedal);
	}

	/**
	* GET移动速度百分比
	*
	* @return 移动速度百分比
	*/
	public static final int getMoveSpeedPer(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MoveSpeedPer_Id);
	}

	/**
	* SET移动速度百分比
	*
	* @param moveSpeedPer 移动速度百分比
	*/
	public static final void setOrPutMoveSpeedPer(PropertyDictionary pd, int moveSpeedPer) {
		pd.setOrPutValue(MGPropertySymbolDefines.MoveSpeedPer_Id, moveSpeedPer);
	}

	/**
	* GET武器模型ID
	*
	* @return 武器模型ID
	*/
	public static final int getWeaponModleId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WeaponModleId_Id);
	}

	/**
	* SET武器模型ID
	*
	* @param weaponModleId 武器模型ID
	*/
	public static final void setOrPutWeaponModleId(PropertyDictionary pd, int weaponModleId) {
		pd.setOrPutValue(MGPropertySymbolDefines.WeaponModleId_Id, weaponModleId);
	}

	/**
	* GET铠甲模型ID
	*
	* @return 铠甲模型ID
	*/
	public static final int getArmorModleId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ArmorModleId_Id);
	}

	/**
	* SET铠甲模型ID
	*
	* @param armorModleId 铠甲模型ID
	*/
	public static final void setOrPutArmorModleId(PropertyDictionary pd, int armorModleId) {
		pd.setOrPutValue(MGPropertySymbolDefines.ArmorModleId_Id, armorModleId);
	}

	/**
	* GET翅膀模型ID
	*
	* @return 翅膀模型ID
	*/
	public static final int getWingModleId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WingModleId_Id);
	}

	/**
	* SET翅膀模型ID
	*
	* @param wingModleId 翅膀模型ID
	*/
	public static final void setOrPutWingModleId(PropertyDictionary pd, int wingModleId) {
		pd.setOrPutValue(MGPropertySymbolDefines.WingModleId_Id, wingModleId);
	}

	/**
	* GET坐骑模型ID
	*
	* @return 坐骑模型ID
	*/
	public static final int getMountModleId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MountModleId_Id);
	}

	/**
	* SET坐骑模型ID
	*
	* @param mountModleId 坐骑模型ID
	*/
	public static final void setOrPutMountModleId(PropertyDictionary pd, int mountModleId) {
		pd.setOrPutValue(MGPropertySymbolDefines.MountModleId_Id, mountModleId);
	}

	/**
	* GET上次登录时间
	*
	* @return 上次登录时间
	*/
	public static final long getLastLoginTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.LastLoginTime_Id);
	}

	/**
	* SET上次登录时间
	*
	* @param lastLoginTime 上次登录时间
	*/
	public static final void setOrPutLastLoginTime(PropertyDictionary pd, long lastLoginTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.LastLoginTime_Id, lastLoginTime);
	}

	/**
	* GET累计在线时间
	*
	* @return 累计在线时间
	*/
	public static final long getOnlineTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OnlineTime_Id);
	}

	/**
	* SET累计在线时间
	*
	* @param onlineTime 累计在线时间
	*/
	public static final void setOrPutOnlineTime(PropertyDictionary pd, long onlineTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.OnlineTime_Id, onlineTime);
	}

	/**
	* GET杀怪经验倍数
	*
	* @return 杀怪经验倍数
	*/
	public static final float getExpMultiple(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ExpMultiple_Id);
	}

	/**
	* SET杀怪经验倍数
	*
	* @param expMultiple 杀怪经验倍数
	*/
	public static final void setOrPutExpMultiple(PropertyDictionary pd, float expMultiple) {
		pd.setOrPutValue(MGPropertySymbolDefines.ExpMultiple_Id, expMultiple);
	}

	/**
	* GET上次登出时间
	*
	* @return 上次登出时间
	*/
	public static final long getLastLogoutTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.LastLogoutTime_Id);
	}

	/**
	* SET上次登出时间
	*
	* @param lastLogoutTime 上次登出时间
	*/
	public static final void setOrPutLastLogoutTime(PropertyDictionary pd, long lastLogoutTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.LastLogoutTime_Id, lastLogoutTime);
	}

	/**
	* GET登录次数
	*
	* @return 登录次数
	*/
	public static final int getLoginCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.LoginCount_Id);
	}

	/**
	* SET登录次数
	*
	* @param loginCount 登录次数
	*/
	public static final void setOrPutLoginCount(PropertyDictionary pd, int loginCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.LoginCount_Id, loginCount);
	}

	/**
	* GET名称
	*
	* @return 名称
	*/
	public static final String getName(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Name_Id);
	}

	/**
	* SET名称
	*
	* @param name 名称
	*/
	public static final void setOrPutName(PropertyDictionary pd, String name) {
		pd.setOrPutValue(MGPropertySymbolDefines.Name_Id, name);
	}

	/**
	* GET描述
	*
	* @return 描述
	*/
	public static final String getDescription(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Description_Id);
	}

	/**
	* SET描述
	*
	* @param description 描述
	*/
	public static final void setOrPutDescription(PropertyDictionary pd, String description) {
		pd.setOrPutValue(MGPropertySymbolDefines.Description_Id, description);
	}

	/**
	* GET提示语
	*
	* @return 提示语
	*/
	public static final String getTips(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Tips_Id);
	}

	/**
	* SET提示语
	*
	* @param tips 提示语
	*/
	public static final void setOrPutTips(PropertyDictionary pd, String tips) {
		pd.setOrPutValue(MGPropertySymbolDefines.Tips_Id, tips);
	}

	/**
	* GET简称
	*
	* @return 简称
	*/
	public static final String getSmallName(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SmallName_Id);
	}

	/**
	* SET简称
	*
	* @param smallName 简称
	*/
	public static final void setOrPutSmallName(PropertyDictionary pd, String smallName) {
		pd.setOrPutValue(MGPropertySymbolDefines.SmallName_Id, smallName);
	}

	/**
	* GET集合
	*
	* @return 集合
	*/
	public static final  Collection<ValueProperty<PropertyDictionary>> getCollection(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Collection_Id);
	}

	/**
	* SET集合
	*
	* @param collection 集合
	*/
	public static final void setOrPutCollection(PropertyDictionary pd,  Collection<ValueProperty<PropertyDictionary>> collection) {
		pd.setOrPutValue(MGPropertySymbolDefines.Collection_Id, collection);
	}

	/**
	* GET数据字典
	*
	* @return 数据字典
	*/
	public static final PropertyDictionary getDictionary(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Dictionary_Id);
	}

	/**
	* SET数据字典
	*
	* @param dictionary 数据字典
	*/
	public static final void setOrPutDictionary(PropertyDictionary pd, PropertyDictionary dictionary) {
		pd.setOrPutValue(MGPropertySymbolDefines.Dictionary_Id, dictionary);
	}

	/**
	* GET是否是采集NPC
	*
	* @return 是否是采集NPC
	*/
	public static final byte getIsPluckNpc(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsPluckNpc_Id);
	}

	/**
	* SET是否是采集NPC
	*
	* @param isPluckNpc 是否是采集NPC
	*/
	public static final void setOrPutIsPluckNpc(PropertyDictionary pd, byte isPluckNpc) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsPluckNpc_Id, isPluckNpc);
	}

	/**
	* GET采集物是否入包
	*
	* @return 采集物是否入包
	*/
	public static final byte getIsPluckRealItem(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsPluckRealItem_Id);
	}

	/**
	* SET采集物是否入包
	*
	* @param isPluckRealItem 采集物是否入包
	*/
	public static final void setOrPutIsPluckRealItem(PropertyDictionary pd, byte isPluckRealItem) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsPluckRealItem_Id, isPluckRealItem);
	}

	/**
	* GET采集等级
	*
	* @return 采集等级
	*/
	public static final int getPluckLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PluckLevel_Id);
	}

	/**
	* SET采集等级
	*
	* @param pluckLevel 采集等级
	*/
	public static final void setOrPutPluckLevel(PropertyDictionary pd, int pluckLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.PluckLevel_Id, pluckLevel);
	}

	/**
	* GET采集时间
	*
	* @return 采集时间
	*/
	public static final int getPluckTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PluckTime_Id);
	}

	/**
	* SET采集时间
	*
	* @param pluckTime 采集时间
	*/
	public static final void setOrPutPluckTime(PropertyDictionary pd, int pluckTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.PluckTime_Id, pluckTime);
	}

	/**
	* GET采集模式
	*
	* @return 采集模式
	*/
	public static final byte getPluckMode(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PluckMode_Id);
	}

	/**
	* SET采集模式
	*
	* @param pluckMode 采集模式
	*/
	public static final void setOrPutPluckMode(PropertyDictionary pd, byte pluckMode) {
		pd.setOrPutValue(MGPropertySymbolDefines.PluckMode_Id, pluckMode);
	}

	/**
	* GET采集是否消失
	*
	* @return 采集是否消失
	*/
	public static final byte getIsPluckDisappear(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsPluckDisappear_Id);
	}

	/**
	* SET采集是否消失
	*
	* @param isPluckDisappear 采集是否消失
	*/
	public static final void setOrPutIsPluckDisappear(PropertyDictionary pd, byte isPluckDisappear) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsPluckDisappear_Id, isPluckDisappear);
	}

	/**
	* GET采集数量归属
	*
	* @return 采集数量归属
	*/
	public static final byte getPluckItemAdscription(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PluckItemAdscription_Id);
	}

	/**
	* SET采集数量归属
	*
	* @param pluckItemAdscription 采集数量归属
	*/
	public static final void setOrPutPluckItemAdscription(PropertyDictionary pd, byte pluckItemAdscription) {
		pd.setOrPutValue(MGPropertySymbolDefines.PluckItemAdscription_Id, pluckItemAdscription);
	}

	/**
	* GET采集表现
	*
	* @return 采集表现
	*/
	public static final byte getPluckBehavior(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PluckBehavior_Id);
	}

	/**
	* SET采集表现
	*
	* @param pluckBehavior 采集表现
	*/
	public static final void setOrPutPluckBehavior(PropertyDictionary pd, byte pluckBehavior) {
		pd.setOrPutValue(MGPropertySymbolDefines.PluckBehavior_Id, pluckBehavior);
	}

	/**
	* GET采集物消失后刷新时间
	*
	* @return 采集物消失后刷新时间
	*/
	public static final int getPluckRefreshTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PluckRefreshTime_Id);
	}

	/**
	* SET采集物消失后刷新时间
	*
	* @param pluckRefreshTime 采集物消失后刷新时间
	*/
	public static final void setOrPutPluckRefreshTime(PropertyDictionary pd, int pluckRefreshTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.PluckRefreshTime_Id, pluckRefreshTime);
	}

	/**
	* GET商店类型
	*
	* @return 商店类型
	*/
	public static final String getStoreType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StoreType_Id);
	}

	/**
	* SET商店类型
	*
	* @param storeType 商店类型
	*/
	public static final void setOrPutStoreType(PropertyDictionary pd, String storeType) {
		pd.setOrPutValue(MGPropertySymbolDefines.StoreType_Id, storeType);
	}

	/**
	* GET商店表格引用编号
	*
	* @return 商店表格引用编号
	*/
	public static final String getStoreTableRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StoreTableRefId_Id);
	}

	/**
	* SET商店表格引用编号
	*
	* @param storeTableRefId 商店表格引用编号
	*/
	public static final void setOrPutStoreTableRefId(PropertyDictionary pd, String storeTableRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.StoreTableRefId_Id, storeTableRefId);
	}

	/**
	* GET商店名称
	*
	* @return 商店名称
	*/
	public static final String getStoreName(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StoreName_Id);
	}

	/**
	* SET商店名称
	*
	* @param storeName 商店名称
	*/
	public static final void setOrPutStoreName(PropertyDictionary pd, String storeName) {
		pd.setOrPutValue(MGPropertySymbolDefines.StoreName_Id, storeName);
	}

	/**
	* GET商店道具限购类型
	*
	* @return 商店道具限购类型
	*/
	public static final byte getItemLimitType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemLimitType_Id);
	}

	/**
	* SET商店道具限购类型
	*
	* @param itemLimitType 商店道具限购类型
	*/
	public static final void setOrPutItemLimitType(PropertyDictionary pd, byte itemLimitType) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemLimitType_Id, itemLimitType);
	}

	/**
	* GET商店道具限购数量
	*
	* @return 商店道具限购数量
	*/
	public static final short getItemLimitNum(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemLimitNum_Id);
	}

	/**
	* SET商店道具限购数量
	*
	* @param itemLimitNum 商店道具限购数量
	*/
	public static final void setOrPutItemLimitNum(PropertyDictionary pd, short itemLimitNum) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemLimitNum_Id, itemLimitNum);
	}

	/**
	* GET商店限购时间
	*
	* @return 商店限购时间
	*/
	public static final String getStoreLimitTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.StoreLimitTime_Id);
	}

	/**
	* SET商店限购时间
	*
	* @param storeLimitTime 商店限购时间
	*/
	public static final void setOrPutStoreLimitTime(PropertyDictionary pd, String storeLimitTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.StoreLimitTime_Id, storeLimitTime);
	}

	/**
	* GET商品类型
	*
	* @return 商品类型
	*/
	public static final byte getItemSellType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemSellType_Id);
	}

	/**
	* SET商品类型
	*
	* @param itemSellType 商品类型
	*/
	public static final void setOrPutItemSellType(PropertyDictionary pd, byte itemSellType) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemSellType_Id, itemSellType);
	}

	/**
	* GET原价元宝
	*
	* @return 原价元宝
	*/
	public static final int getUnbindOriginalPrice(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.UnbindOriginalPrice_Id);
	}

	/**
	* SET原价元宝
	*
	* @param unbindOriginalPrice 原价元宝
	*/
	public static final void setOrPutUnbindOriginalPrice(PropertyDictionary pd, int unbindOriginalPrice) {
		pd.setOrPutValue(MGPropertySymbolDefines.UnbindOriginalPrice_Id, unbindOriginalPrice);
	}

	/**
	* GET原价绑定元宝
	*
	* @return 原价绑定元宝
	*/
	public static final int getBindOriginalPrice(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BindOriginalPrice_Id);
	}

	/**
	* SET原价绑定元宝
	*
	* @param bindOriginalPrice 原价绑定元宝
	*/
	public static final void setOrPutBindOriginalPrice(PropertyDictionary pd, int bindOriginalPrice) {
		pd.setOrPutValue(MGPropertySymbolDefines.BindOriginalPrice_Id, bindOriginalPrice);
	}

	/**
	* GET是否正在采集
	*
	* @return 是否正在采集
	*/
	public static final byte getIsPlucking(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsPlucking_Id);
	}

	/**
	* SET是否正在采集
	*
	* @param isPlucking 是否正在采集
	*/
	public static final void setOrPutIsPlucking(PropertyDictionary pd, byte isPlucking) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsPlucking_Id, isPlucking);
	}

	/**
	* GET采集物类型
	*
	* @return 采集物类型
	*/
	public static final byte getPluckType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PluckType_Id);
	}

	/**
	* SET采集物类型
	*
	* @param pluckType 采集物类型
	*/
	public static final void setOrPutPluckType(PropertyDictionary pd, byte pluckType) {
		pd.setOrPutValue(MGPropertySymbolDefines.PluckType_Id, pluckType);
	}

	/**
	* GET采集物共享类型
	*
	* @return 采集物共享类型
	*/
	public static final byte getShareType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ShareType_Id);
	}

	/**
	* SET采集物共享类型
	*
	* @param shareType 采集物共享类型
	*/
	public static final void setOrPutShareType(PropertyDictionary pd, byte shareType) {
		pd.setOrPutValue(MGPropertySymbolDefines.ShareType_Id, shareType);
	}

	/**
	* GET采集物产出类型
	*
	* @return 采集物产出类型
	*/
	public static final byte getOutputType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OutputType_Id);
	}

	/**
	* SET采集物产出类型
	*
	* @param outputType 采集物产出类型
	*/
	public static final void setOrPutOutputType(PropertyDictionary pd, byte outputType) {
		pd.setOrPutValue(MGPropertySymbolDefines.OutputType_Id, outputType);
	}

	/**
	* GET任务类型
	*
	* @return 任务类型
	*/
	public static final byte getQuestType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.QuestType_Id);
	}

	/**
	* SET任务类型
	*
	* @param questType 任务类型
	*/
	public static final void setOrPutQuestType(PropertyDictionary pd, byte questType) {
		pd.setOrPutValue(MGPropertySymbolDefines.QuestType_Id, questType);
	}

	/**
	* GET下一个任务
	*
	* @return 下一个任务
	*/
	public static final String getNextQuestId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.NextQuestId_Id);
	}

	/**
	* SET下一个任务
	*
	* @param nextQuestId 下一个任务
	*/
	public static final void setOrPutNextQuestId(PropertyDictionary pd, String nextQuestId) {
		pd.setOrPutValue(MGPropertySymbolDefines.NextQuestId_Id, nextQuestId);
	}

	/**
	* GET前一个任务
	*
	* @return 前一个任务
	*/
	public static final String getPreQuestId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PreQuestId_Id);
	}

	/**
	* SET前一个任务
	*
	* @param preQuestId 前一个任务
	*/
	public static final void setOrPutPreQuestId(PropertyDictionary pd, String preQuestId) {
		pd.setOrPutValue(MGPropertySymbolDefines.PreQuestId_Id, preQuestId);
	}

	/**
	* GET日常任务类型
	*
	* @return 日常任务类型
	*/
	public static final byte getDailyQuestType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.DailyQuestType_Id);
	}

	/**
	* SET日常任务类型
	*
	* @param dailyQuestType 日常任务类型
	*/
	public static final void setOrPutDailyQuestType(PropertyDictionary pd, byte dailyQuestType) {
		pd.setOrPutValue(MGPropertySymbolDefines.DailyQuestType_Id, dailyQuestType);
	}

	/**
	* GET推荐环数
	*
	* @return 推荐环数
	*/
	public static final int getDailyProposeRing(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.DailyProposeRing_Id);
	}

	/**
	* SET推荐环数
	*
	* @param dailyProposeRing 推荐环数
	*/
	public static final void setOrPutDailyProposeRing(PropertyDictionary pd, int dailyProposeRing) {
		pd.setOrPutValue(MGPropertySymbolDefines.DailyProposeRing_Id, dailyProposeRing);
	}

	/**
	* GET物品唯一Id
	*
	* @return 物品唯一Id
	*/
	public static final String getItemId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ItemId_Id);
	}

	/**
	* SET物品唯一Id
	*
	* @param itemId 物品唯一Id
	*/
	public static final void setOrPutItemId(PropertyDictionary pd, String itemId) {
		pd.setOrPutValue(MGPropertySymbolDefines.ItemId_Id, itemId);
	}

	/**
	* GET总值
	*
	* @return 总值
	*/
	public static final int getTotalValue(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TotalValue_Id);
	}

	/**
	* SET总值
	*
	* @param totalValue 总值
	*/
	public static final void setOrPutTotalValue(PropertyDictionary pd, int totalValue) {
		pd.setOrPutValue(MGPropertySymbolDefines.TotalValue_Id, totalValue);
	}

	/**
	* GET优先级
	*
	* @return 优先级
	*/
	public static final int getPriority(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Priority_Id);
	}

	/**
	* SET优先级
	*
	* @param priority 优先级
	*/
	public static final void setOrPutPriority(PropertyDictionary pd, int priority) {
		pd.setOrPutValue(MGPropertySymbolDefines.Priority_Id, priority);
	}

	/**
	* GET模型缩放值
	*
	* @return 模型缩放值
	*/
	public static final int getModuleScale(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ModuleScale_Id);
	}

	/**
	* SET模型缩放值
	*
	* @param moduleScale 模型缩放值
	*/
	public static final void setOrPutModuleScale(PropertyDictionary pd, int moduleScale) {
		pd.setOrPutValue(MGPropertySymbolDefines.ModuleScale_Id, moduleScale);
	}

	/**
	* GET能否进入vipBoss地图
	*
	* @return 能否进入vipBoss地图
	*/
	public static final byte getCanVipBoss(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CanVipBoss_Id);
	}

	/**
	* SET能否进入vipBoss地图
	*
	* @param canVipBoss 能否进入vipBoss地图
	*/
	public static final void setOrPutCanVipBoss(PropertyDictionary pd, byte canVipBoss) {
		pd.setOrPutValue(MGPropertySymbolDefines.CanVipBoss_Id, canVipBoss);
	}

	/**
	* GET能否在我要变强界面，传送到boss界面
	*
	* @return 能否在我要变强界面，传送到boss界面
	*/
	public static final byte getCanVipStrong(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CanVipStrong_Id);
	}

	/**
	* SET能否在我要变强界面，传送到boss界面
	*
	* @param canVipStrong 能否在我要变强界面，传送到boss界面
	*/
	public static final void setOrPutCanVipStrong(PropertyDictionary pd, byte canVipStrong) {
		pd.setOrPutValue(MGPropertySymbolDefines.CanVipStrong_Id, canVipStrong);
	}

	/**
	* GET使用飞鞋不消耗物品
	*
	* @return 使用飞鞋不消耗物品
	*/
	public static final byte getCanShoeNoItem(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CanShoeNoItem_Id);
	}

	/**
	* SET使用飞鞋不消耗物品
	*
	* @param canShoeNoItem 使用飞鞋不消耗物品
	*/
	public static final void setOrPutCanShoeNoItem(PropertyDictionary pd, byte canShoeNoItem) {
		pd.setOrPutValue(MGPropertySymbolDefines.CanShoeNoItem_Id, canShoeNoItem);
	}

	/**
	* GETvip武器奖励等级
	*
	* @return vip武器奖励等级
	*/
	public static final String getVipRewardLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.VipRewardLevel_Id);
	}

	/**
	* SETvip武器奖励等级
	*
	* @param vipRewardLevel vip武器奖励等级
	*/
	public static final void setOrPutVipRewardLevel(PropertyDictionary pd, String vipRewardLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.VipRewardLevel_Id, vipRewardLevel);
	}

	/**
	* GETvip类型
	*
	* @return vip类型
	*/
	public static final byte getVipType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.VipType_Id);
	}

	/**
	* SETvip类型
	*
	* @param vipType vip类型
	*/
	public static final void setOrPutVipType(PropertyDictionary pd, byte vipType) {
		pd.setOrPutValue(MGPropertySymbolDefines.VipType_Id, vipType);
	}

	/**
	* GET系统提示信息模板
	*
	* @return 系统提示信息模板
	*/
	public static final String getBricks(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.Bricks_Id);
	}

	/**
	* SET系统提示信息模板
	*
	* @param bricks 系统提示信息模板
	*/
	public static final void setOrPutBricks(PropertyDictionary pd, String bricks) {
		pd.setOrPutValue(MGPropertySymbolDefines.Bricks_Id, bricks);
	}

	/**
	* GET签到次数
	*
	* @return 签到次数
	*/
	public static final byte getSignCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.SignCount_Id);
	}

	/**
	* SET签到次数
	*
	* @param signCount 签到次数
	*/
	public static final void setOrPutSignCount(PropertyDictionary pd, byte signCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.SignCount_Id, signCount);
	}

	/**
	* GET在线时间前置奖励refId
	*
	* @return 在线时间前置奖励refId
	*/
	public static final String getOnlinePreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OnlinePreRefId_Id);
	}

	/**
	* SET在线时间前置奖励refId
	*
	* @param onlinePreRefId 在线时间前置奖励refId
	*/
	public static final void setOrPutOnlinePreRefId(PropertyDictionary pd, String onlinePreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.OnlinePreRefId_Id, onlinePreRefId);
	}

	/**
	* GET在线时间后置奖励refId
	*
	* @return 在线时间后置奖励refId
	*/
	public static final String getOnlineNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OnlineNextRefId_Id);
	}

	/**
	* SET在线时间后置奖励refId
	*
	* @param onlineNextRefId 在线时间后置奖励refId
	*/
	public static final void setOrPutOnlineNextRefId(PropertyDictionary pd, String onlineNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.OnlineNextRefId_Id, onlineNextRefId);
	}

	/**
	* GET在线累计秒数
	*
	* @return 在线累计秒数
	*/
	public static final int getOnlineSecond(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OnlineSecond_Id);
	}

	/**
	* SET在线累计秒数
	*
	* @param onlineSecond 在线累计秒数
	*/
	public static final void setOrPutOnlineSecond(PropertyDictionary pd, int onlineSecond) {
		pd.setOrPutValue(MGPropertySymbolDefines.OnlineSecond_Id, onlineSecond);
	}

	/**
	* GET获取奖励的方式
	*
	* @return 获取奖励的方式
	*/
	public static final byte getRewardImmediately(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RewardImmediately_Id);
	}

	/**
	* SET获取奖励的方式
	*
	* @param rewardImmediately 获取奖励的方式
	*/
	public static final void setOrPutRewardImmediately(PropertyDictionary pd, byte rewardImmediately) {
		pd.setOrPutValue(MGPropertySymbolDefines.RewardImmediately_Id, rewardImmediately);
	}

	/**
	* GET坐骑前置奖励ID
	*
	* @return 坐骑前置奖励ID
	*/
	public static final String getRideRewardPreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RideRewardPreRefId_Id);
	}

	/**
	* SET坐骑前置奖励ID
	*
	* @param rideRewardPreRefId 坐骑前置奖励ID
	*/
	public static final void setOrPutRideRewardPreRefId(PropertyDictionary pd, String rideRewardPreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.RideRewardPreRefId_Id, rideRewardPreRefId);
	}

	/**
	* GET坐骑后置奖励ID
	*
	* @return 坐骑后置奖励ID
	*/
	public static final String getRideRewardNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RideRewardNextRefId_Id);
	}

	/**
	* SET坐骑后置奖励ID
	*
	* @param rideRewardNextRefId 坐骑后置奖励ID
	*/
	public static final void setOrPutRideRewardNextRefId(PropertyDictionary pd, String rideRewardNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.RideRewardNextRefId_Id, rideRewardNextRefId);
	}

	/**
	* GET翅膀前置奖励ID
	*
	* @return 翅膀前置奖励ID
	*/
	public static final String getWingRewardPreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WingRewardPreRefId_Id);
	}

	/**
	* SET翅膀前置奖励ID
	*
	* @param wingRewardPreRefId 翅膀前置奖励ID
	*/
	public static final void setOrPutWingRewardPreRefId(PropertyDictionary pd, String wingRewardPreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.WingRewardPreRefId_Id, wingRewardPreRefId);
	}

	/**
	* GET翅膀后置奖励ID
	*
	* @return 翅膀后置奖励ID
	*/
	public static final String getWingRewardNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WingRewardNextRefId_Id);
	}

	/**
	* SET翅膀后置奖励ID
	*
	* @param wingRewardNextRefId 翅膀后置奖励ID
	*/
	public static final void setOrPutWingRewardNextRefId(PropertyDictionary pd, String wingRewardNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.WingRewardNextRefId_Id, wingRewardNextRefId);
	}

	/**
	* GET法宝前置奖励ID
	*
	* @return 法宝前置奖励ID
	*/
	public static final String getTalismanRewardPreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TalismanRewardPreRefId_Id);
	}

	/**
	* SET法宝前置奖励ID
	*
	* @param talismanRewardPreRefId 法宝前置奖励ID
	*/
	public static final void setOrPutTalismanRewardPreRefId(PropertyDictionary pd, String talismanRewardPreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.TalismanRewardPreRefId_Id, talismanRewardPreRefId);
	}

	/**
	* GET法宝后置奖励ID
	*
	* @return 法宝后置奖励ID
	*/
	public static final String getTalismanRewardNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TalismanRewardNextRefId_Id);
	}

	/**
	* SET法宝后置奖励ID
	*
	* @param talismanRewardNextRefId 法宝后置奖励ID
	*/
	public static final void setOrPutTalismanRewardNextRefId(PropertyDictionary pd, String talismanRewardNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.TalismanRewardNextRefId_Id, talismanRewardNextRefId);
	}

	/**
	* GET法宝数量
	*
	* @return 法宝数量
	*/
	public static final byte getTalisManNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TalisManNumber_Id);
	}

	/**
	* SET法宝数量
	*
	* @param talisManNumber 法宝数量
	*/
	public static final void setOrPutTalisManNumber(PropertyDictionary pd, byte talisManNumber) {
		pd.setOrPutValue(MGPropertySymbolDefines.TalisManNumber_Id, talisManNumber);
	}

	/**
	* GET等级奖励前置ID
	*
	* @return 等级奖励前置ID
	*/
	public static final String getLevelUpRewardPreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.LevelUpRewardPreRefId_Id);
	}

	/**
	* SET等级奖励前置ID
	*
	* @param levelUpRewardPreRefId 等级奖励前置ID
	*/
	public static final void setOrPutLevelUpRewardPreRefId(PropertyDictionary pd, String levelUpRewardPreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.LevelUpRewardPreRefId_Id, levelUpRewardPreRefId);
	}

	/**
	* GET等级奖励后置ID
	*
	* @return 等级奖励后置ID
	*/
	public static final String getLevelUpRewardNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.LevelUpRewardNextRefId_Id);
	}

	/**
	* SET等级奖励后置ID
	*
	* @param levelUpRewardNextRefId 等级奖励后置ID
	*/
	public static final void setOrPutLevelUpRewardNextRefId(PropertyDictionary pd, String levelUpRewardNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.LevelUpRewardNextRefId_Id, levelUpRewardNextRefId);
	}

	/**
	* GET普通挖宝次数
	*
	* @return 普通挖宝次数
	*/
	public static final byte getGeneralDigsCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.GeneralDigsCount_Id);
	}

	/**
	* SET普通挖宝次数
	*
	* @param generalDigsCount 普通挖宝次数
	*/
	public static final void setOrPutGeneralDigsCount(PropertyDictionary pd, byte generalDigsCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.GeneralDigsCount_Id, generalDigsCount);
	}

	/**
	* GET极品挖宝次数
	*
	* @return 极品挖宝次数
	*/
	public static final byte getBestDigsCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BestDigsCount_Id);
	}

	/**
	* SET极品挖宝次数
	*
	* @param bestDigsCount 极品挖宝次数
	*/
	public static final void setOrPutBestDigsCount(PropertyDictionary pd, byte bestDigsCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.BestDigsCount_Id, bestDigsCount);
	}

	/**
	* GET挖宝类型
	*
	* @return 挖宝类型
	*/
	public static final byte getDigsType(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.DigsType_Id);
	}

	/**
	* SET挖宝类型
	*
	* @param digsType 挖宝类型
	*/
	public static final void setOrPutDigsType(PropertyDictionary pd, byte digsType) {
		pd.setOrPutValue(MGPropertySymbolDefines.DigsType_Id, digsType);
	}

	/**
	* GET活动排序id
	*
	* @return 活动排序id
	*/
	public static final int getActivitySortId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.ActivitySortId_Id);
	}

	/**
	* SET活动排序id
	*
	* @param activitySortId 活动排序id
	*/
	public static final void setOrPutActivitySortId(PropertyDictionary pd, int activitySortId) {
		pd.setOrPutValue(MGPropertySymbolDefines.ActivitySortId_Id, activitySortId);
	}

	/**
	* GET通用推送顺序号
	*
	* @return 通用推送顺序号
	*/
	public static final byte getCommonNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CommonNumber_Id);
	}

	/**
	* SET通用推送顺序号
	*
	* @param commonNumber 通用推送顺序号
	*/
	public static final void setOrPutCommonNumber(PropertyDictionary pd, byte commonNumber) {
		pd.setOrPutValue(MGPropertySymbolDefines.CommonNumber_Id, commonNumber);
	}

	/**
	* GET小R推送顺序号
	*
	* @return 小R推送顺序号
	*/
	public static final byte getLittleRNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.LittleRNumber_Id);
	}

	/**
	* SET小R推送顺序号
	*
	* @param littleRNumber 小R推送顺序号
	*/
	public static final void setOrPutLittleRNumber(PropertyDictionary pd, byte littleRNumber) {
		pd.setOrPutValue(MGPropertySymbolDefines.LittleRNumber_Id, littleRNumber);
	}

	/**
	* GET中R推送顺序号
	*
	* @return 中R推送顺序号
	*/
	public static final byte getMediumRNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MediumRNumber_Id);
	}

	/**
	* SET中R推送顺序号
	*
	* @param mediumRNumber 中R推送顺序号
	*/
	public static final void setOrPutMediumRNumber(PropertyDictionary pd, byte mediumRNumber) {
		pd.setOrPutValue(MGPropertySymbolDefines.MediumRNumber_Id, mediumRNumber);
	}

	/**
	* GET大R推送顺序号
	*
	* @return 大R推送顺序号
	*/
	public static final byte getBigRNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.BigRNumber_Id);
	}

	/**
	* SET大R推送顺序号
	*
	* @param bigRNumber 大R推送顺序号
	*/
	public static final void setOrPutBigRNumber(PropertyDictionary pd, byte bigRNumber) {
		pd.setOrPutValue(MGPropertySymbolDefines.BigRNumber_Id, bigRNumber);
	}

	/**
	* GET解锁顺序号
	*
	* @return 解锁顺序号
	*/
	public static final byte getOpenActivityNumber(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OpenActivityNumber_Id);
	}

	/**
	* SET解锁顺序号
	*
	* @param openActivityNumber 解锁顺序号
	*/
	public static final void setOrPutOpenActivityNumber(PropertyDictionary pd, byte openActivityNumber) {
		pd.setOrPutValue(MGPropertySymbolDefines.OpenActivityNumber_Id, openActivityNumber);
	}

	/**
	* GET是否是王城
	*
	* @return 是否是王城
	*/
	public static final byte getIsKingCity(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsKingCity_Id);
	}

	/**
	* SET是否是王城
	*
	* @param isKingCity 是否是王城
	*/
	public static final void setOrPutIsKingCity(PropertyDictionary pd, byte isKingCity) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsKingCity_Id, isKingCity);
	}

	/**
	* GET被附加buff的时候是否作pk模式检查
	*
	* @return 被附加buff的时候是否作pk模式检查
	*/
	public static final byte getIsPkModelCheck(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsPkModelCheck_Id);
	}

	/**
	* SET被附加buff的时候是否作pk模式检查
	*
	* @param isPkModelCheck 被附加buff的时候是否作pk模式检查
	*/
	public static final void setOrPutIsPkModelCheck(PropertyDictionary pd, byte isPkModelCheck) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsPkModelCheck_Id, isPkModelCheck);
	}

	/**
	* GET杀人时增加的pk值
	*
	* @return 杀人时增加的pk值
	*/
	public static final int getKillAddPKValue(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.KillAddPKValue_Id);
	}

	/**
	* SET杀人时增加的pk值
	*
	* @param killAddPKValue 杀人时增加的pk值
	*/
	public static final void setOrPutKillAddPKValue(PropertyDictionary pd, int killAddPKValue) {
		pd.setOrPutValue(MGPropertySymbolDefines.KillAddPKValue_Id, killAddPKValue);
	}

	/**
	* GET攻击人时增加的pk值
	*
	* @return 攻击人时增加的pk值
	*/
	public static final int getAttackAddPkValue(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.AttackAddPkValue_Id);
	}

	/**
	* SET攻击人时增加的pk值
	*
	* @param attackAddPkValue 攻击人时增加的pk值
	*/
	public static final void setOrPutAttackAddPkValue(PropertyDictionary pd, int attackAddPkValue) {
		pd.setOrPutValue(MGPropertySymbolDefines.AttackAddPkValue_Id, attackAddPkValue);
	}

	/**
	* GET该场景下pk是否进入pk状态
	*
	* @return 该场景下pk是否进入pk状态
	*/
	public static final byte getIsEnterPKState(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsEnterPKState_Id);
	}

	/**
	* SET该场景下pk是否进入pk状态
	*
	* @param isEnterPKState 该场景下pk是否进入pk状态
	*/
	public static final void setOrPutIsEnterPKState(PropertyDictionary pd, byte isEnterPKState) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsEnterPKState_Id, isEnterPKState);
	}

	/**
	* GET是否使用默认掉落
	*
	* @return 是否使用默认掉落
	*/
	public static final byte getIsUseDefaultDrop(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsUseDefaultDrop_Id);
	}

	/**
	* SET是否使用默认掉落
	*
	* @param isUseDefaultDrop 是否使用默认掉落
	*/
	public static final void setOrPutIsUseDefaultDrop(PropertyDictionary pd, byte isUseDefaultDrop) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsUseDefaultDrop_Id, isUseDefaultDrop);
	}

	/**
	* GET怪物入侵活动飘字
	*
	* @return 怪物入侵活动飘字
	*/
	public static final byte getMonsterInvasionFont(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MonsterInvasionFont_Id);
	}

	/**
	* SET怪物入侵活动飘字
	*
	* @param monsterInvasionFont 怪物入侵活动飘字
	*/
	public static final void setOrPutMonsterInvasionFont(PropertyDictionary pd, byte monsterInvasionFont) {
		pd.setOrPutValue(MGPropertySymbolDefines.MonsterInvasionFont_Id, monsterInvasionFont);
	}

	/**
	* GET首充类活动领奖id|
	*
	* @return 首充类活动领奖id|
	*/
	public static final int getOperatActivityId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OperatActivityId_Id);
	}

	/**
	* SET首充类活动领奖id|
	*
	* @param operatActivityId 首充类活动领奖id|
	*/
	public static final void setOrPutOperatActivityId(PropertyDictionary pd, int operatActivityId) {
		pd.setOrPutValue(MGPropertySymbolDefines.OperatActivityId_Id, operatActivityId);
	}

	/**
	* GET首充类活动额外数据
	*
	* @return 首充类活动额外数据
	*/
	public static final String getOperatOtherData(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.OperatOtherData_Id);
	}

	/**
	* SET首充类活动额外数据
	*
	* @param operatOtherData 首充类活动额外数据
	*/
	public static final void setOrPutOperatOtherData(PropertyDictionary pd, String operatOtherData) {
		pd.setOrPutValue(MGPropertySymbolDefines.OperatOtherData_Id, operatOtherData);
	}

	/**
	* GETVIP等级武器奖励
	*
	* @return VIP等级武器奖励
	*/
	public static final String getVipWeaponReward(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.VipWeaponReward_Id);
	}

	/**
	* SETVIP等级武器奖励
	*
	* @param vipWeaponReward VIP等级武器奖励
	*/
	public static final void setOrPutVipWeaponReward(PropertyDictionary pd, String vipWeaponReward) {
		pd.setOrPutValue(MGPropertySymbolDefines.VipWeaponReward_Id, vipWeaponReward);
	}

	/**
	* GET累计充值元宝
	*
	* @return 累计充值元宝
	*/
	public static final int getTotalRecharge(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TotalRecharge_Id);
	}

	/**
	* SET累计充值元宝
	*
	* @param totalRecharge 累计充值元宝
	*/
	public static final void setOrPutTotalRecharge(PropertyDictionary pd, int totalRecharge) {
		pd.setOrPutValue(MGPropertySymbolDefines.TotalRecharge_Id, totalRecharge);
	}

	/**
	* GET累计充值次数
	*
	* @return 累计充值次数
	*/
	public static final int getTotalRechargeCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TotalRechargeCount_Id);
	}

	/**
	* SET累计充值次数
	*
	* @param totalRechargeCount 累计充值次数
	*/
	public static final void setOrPutTotalRechargeCount(PropertyDictionary pd, int totalRechargeCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.TotalRechargeCount_Id, totalRechargeCount);
	}

	/**
	* GET累计消费元宝
	*
	* @return 累计消费元宝
	*/
	public static final int getTotalConsumeUnBindedGold(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TotalConsumeUnBindedGold_Id);
	}

	/**
	* SET累计消费元宝
	*
	* @param totalConsumeUnBindedGold 累计消费元宝
	*/
	public static final void setOrPutTotalConsumeUnBindedGold(PropertyDictionary pd, int totalConsumeUnBindedGold) {
		pd.setOrPutValue(MGPropertySymbolDefines.TotalConsumeUnBindedGold_Id, totalConsumeUnBindedGold);
	}

	/**
	* GET累计消费邦元
	*
	* @return 累计消费邦元
	*/
	public static final int getTotalConsumeBindedGold(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.TotalConsumeBindedGold_Id);
	}

	/**
	* SET累计消费邦元
	*
	* @param totalConsumeBindedGold 累计消费邦元
	*/
	public static final void setOrPutTotalConsumeBindedGold(PropertyDictionary pd, int totalConsumeBindedGold) {
		pd.setOrPutValue(MGPropertySymbolDefines.TotalConsumeBindedGold_Id, totalConsumeBindedGold);
	}

	/**
	* GET首充时间
	*
	* @return 首充时间
	*/
	public static final long getFirstRechargeTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.FirstRechargeTime_Id);
	}

	/**
	* SET首充时间
	*
	* @param firstRechargeTime 首充时间
	*/
	public static final void setOrPutFirstRechargeTime(PropertyDictionary pd, long firstRechargeTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.FirstRechargeTime_Id, firstRechargeTime);
	}

	/**
	* GET最近充值时间
	*
	* @return 最近充值时间
	*/
	public static final long getLastRechargeTime(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.LastRechargeTime_Id);
	}

	/**
	* SET最近充值时间
	*
	* @param lastRechargeTime 最近充值时间
	*/
	public static final void setOrPutLastRechargeTime(PropertyDictionary pd, long lastRechargeTime) {
		pd.setOrPutValue(MGPropertySymbolDefines.LastRechargeTime_Id, lastRechargeTime);
	}

	/**
	* GET是否已首冲
	*
	* @return 是否已首冲
	*/
	public static final byte getIsFirstRecharge(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsFirstRecharge_Id);
	}

	/**
	* SET是否已首冲
	*
	* @param isFirstRecharge 是否已首冲
	*/
	public static final void setOrPutIsFirstRecharge(PropertyDictionary pd, byte isFirstRecharge) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsFirstRecharge_Id, isFirstRecharge);
	}

	/**
	* GET本周消费累计
	*
	* @return 本周消费累计
	*/
	public static final int getCrtWeekConsume(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CrtWeekConsume_Id);
	}

	/**
	* SET本周消费累计
	*
	* @param crtWeekConsume 本周消费累计
	*/
	public static final void setOrPutCrtWeekConsume(PropertyDictionary pd, int crtWeekConsume) {
		pd.setOrPutValue(MGPropertySymbolDefines.CrtWeekConsume_Id, crtWeekConsume);
	}

	/**
	* GET是否闪烁
	*
	* @return 是否闪烁
	*/
	public static final byte getIsTwinkle(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsTwinkle_Id);
	}

	/**
	* SET是否闪烁
	*
	* @param isTwinkle 是否闪烁
	*/
	public static final void setOrPutIsTwinkle(PropertyDictionary pd, byte isTwinkle) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsTwinkle_Id, isTwinkle);
	}

	/**
	* GET是否走马灯通知
	*
	* @return 是否走马灯通知
	*/
	public static final byte getIsScrollNotice(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsScrollNotice_Id);
	}

	/**
	* SET是否走马灯通知
	*
	* @param isScrollNotice 是否走马灯通知
	*/
	public static final void setOrPutIsScrollNotice(PropertyDictionary pd, byte isScrollNotice) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsScrollNotice_Id, isScrollNotice);
	}

	/**
	* GET翅膀升级当前等级一次性可使用最大羽毛数
	*
	* @return 翅膀升级当前等级一次性可使用最大羽毛数
	*/
	public static final byte getFeatherMaxConsume(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.FeatherMaxConsume_Id);
	}

	/**
	* SET翅膀升级当前等级一次性可使用最大羽毛数
	*
	* @param featherMaxConsume 翅膀升级当前等级一次性可使用最大羽毛数
	*/
	public static final void setOrPutFeatherMaxConsume(PropertyDictionary pd, byte featherMaxConsume) {
		pd.setOrPutValue(MGPropertySymbolDefines.FeatherMaxConsume_Id, featherMaxConsume);
	}

	/**
	* GET心法上一级编号
	*
	* @return 心法上一级编号
	*/
	public static final String getCittaPreRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CittaPreRefId_Id);
	}

	/**
	* SET心法上一级编号
	*
	* @param cittaPreRefId 心法上一级编号
	*/
	public static final void setOrPutCittaPreRefId(PropertyDictionary pd, String cittaPreRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.CittaPreRefId_Id, cittaPreRefId);
	}

	/**
	* GET心法下一级编号
	*
	* @return 心法下一级编号
	*/
	public static final String getCittaNextRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.CittaNextRefId_Id);
	}

	/**
	* SET心法下一级编号
	*
	* @param cittaNextRefId 心法下一级编号
	*/
	public static final void setOrPutCittaNextRefId(PropertyDictionary pd, String cittaNextRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.CittaNextRefId_Id, cittaNextRefId);
	}

	/**
	* GET翅膀refId
	*
	* @return 翅膀refId
	*/
	public static final String getWingRefId(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.WingRefId_Id);
	}

	/**
	* SET翅膀refId
	*
	* @param wingRefId 翅膀refId
	*/
	public static final void setOrPutWingRefId(PropertyDictionary pd, String wingRefId) {
		pd.setOrPutValue(MGPropertySymbolDefines.WingRefId_Id, wingRefId);
	}

	/**
	* GETpk模式
	*
	* @return pk模式
	*/
	public static final byte getPkModel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.PkModel_Id);
	}

	/**
	* SETpk模式
	*
	* @param pkModel pk模式
	*/
	public static final void setOrPutPkModel(PropertyDictionary pd, byte pkModel) {
		pd.setOrPutValue(MGPropertySymbolDefines.PkModel_Id, pkModel);
	}

	/**
	* GET最大拍卖数量
	*
	* @return 最大拍卖数量
	*/
	public static final int getMaxAuctionCount(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.MaxAuctionCount_Id);
	}

	/**
	* SET最大拍卖数量
	*
	* @param maxAuctionCount 最大拍卖数量
	*/
	public static final void setOrPutMaxAuctionCount(PropertyDictionary pd, int maxAuctionCount) {
		pd.setOrPutValue(MGPropertySymbolDefines.MaxAuctionCount_Id, maxAuctionCount);
	}

	/**
	* GET新手保护等级
	*
	* @return 新手保护等级
	*/
	public static final int getRookieProtectionLevel(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.RookieProtectionLevel_Id);
	}

	/**
	* SET新手保护等级
	*
	* @param rookieProtectionLevel 新手保护等级
	*/
	public static final void setOrPutRookieProtectionLevel(PropertyDictionary pd, int rookieProtectionLevel) {
		pd.setOrPutValue(MGPropertySymbolDefines.RookieProtectionLevel_Id, rookieProtectionLevel);
	}

	/**
	* GET是否是极品装备
	*
	* @return 是否是极品装备
	*/
	public static final byte getIsHighestEquipment(PropertyDictionary pd) {
		return pd.getValue(MGPropertySymbolDefines.IsHighestEquipment_Id);
	}

	/**
	* SET是否是极品装备
	*
	* @param isHighestEquipment 是否是极品装备
	*/
	public static final void setOrPutIsHighestEquipment(PropertyDictionary pd, byte isHighestEquipment) {
		pd.setOrPutValue(MGPropertySymbolDefines.IsHighestEquipment_Id, isHighestEquipment);
	}

}
